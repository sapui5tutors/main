/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "com/sapui5tutors/Component-preload",
	"modules": {
		"com/sapui5tutors/model/Close.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\n\t\t// close: function() {\n\t\t\t\n\t\t// \tif (navigator.onLine == false) {\n\t\t// \t\tsetTimeout(function() {\n\t\t// \t\t\t\tsap.m.MessageToast.show(\"The app runs online, Please use a stable Internet Connection. Thank You! \", {\n\t\t// \t\t\t\t\tduration: 5000,\n\t\t// \t\t\t\t\twidth: \"20em\"\n\t\t// \t\t\t\t});\n\t\t// \t\t\t},\n\t\t// \t\t\t150);\n\n\t\t// \t\tsetTimeout(function() {\n\t\t// \t\t\t\twindow.close();\n\t\t// \t\t\t},\n\t\t// \t\t\t5000);\n\n\t\t// \t}\n\t\t// \t\t}\nclose: function () {\n    var xhr = new XMLHttpRequest();\n    var file = \"https://www.kirupa.com/blank.png\";\n    var randomNum = Math.round(Math.random() * 10000);\n \n    xhr.open('HEAD', file + \"?rand=\" + randomNum, true);\n    xhr.send();\n     \n    xhr.addEventListener(\"readystatechange\", processRequest, false);\n \n    function processRequest(e) {\n      if (xhr.readyState == 4) {\n        if (xhr.status >= 200 && xhr.status < 304) {\n        } else {\n        \tsetTimeout(function() {\n\t\t\t\t\t\tsap.m.MessageToast.show(\"The app runs online, Please use a stable Internet Connection. Thank You! \", {\n\t\t\t\t\t\t\tduration: 5000,\n\t\t\t\t\t\t\twidth: \"20em\"\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t150);\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tnavigator.app.exitApp();\n\t\t\t\t\t},\n\t\t\t\t\t5000);\n\t\t\t\t\t\n        }\n      }\n    }\n}\n\t\t\n\t\n\n\t};\n\n});",
		"com/sapui5tutors/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"com/sapui5tutors/model/models\"\n], function(UIComponent, Device, models) {\n\t\"use strict\";\n\n\treturn UIComponent.extend(\"com.sapui5tutors.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\t// call the base component's init function\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\t\t\tthis.getRouter().register(\"appRouter\");\n\t\t\tthis.getRouter().initialize();\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t\n\t\t}\n\t});\n\n});",
		"com/sapui5tutors/controller/app.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.app\", {\n\t\tonInit: function() {\n\t\t\t\n\t\t\twindow.setInterval(function(){\n  models.close();\n}, 30000);\n\t\t}\n\t\t\t\n\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/ComponentDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.ComponentDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n            onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\n\t};\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/WebIDETutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\nfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( { \n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  if(window.AdMob) AdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:true} );\n \n}\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.WebIDETutorials\", {\n\t\tonInit: function() {\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\t\t\n\t\t\tif(window.AdMob){ AdMob.showInterstitial();}\n\t\t}\n\t\t\n           \n\t});\n\n});",
		"com/sapui5tutors/controller/Dashboard.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\t//////////////////////////////////////\n\tfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( {\n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  \n \n}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n  ////////////////\n\treturn Controller.extend(\"com.sapui5tutors.controller.Dashboard\", {\n\t\tonInit: function() {\n\t\t\t// models.close();\n\t\t\tvar page = this.getView().byId(\"dashboard\");\n\t\t\t// var Tile1 = page.getContent()[0].getTiles()[1];\n\t\t\t// var Tile1 = this.getView().byId(\"avbx\");\n\t\t\t// Tile1.bindElement(\"mylocaldata>/Collection/percentValue\");\n\t\t\tpage.addStyleClass(\"myBackgroundStyle\");\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\n\t\t\t},\n\t\t\tonAfterRendering: function(){\n\t\t\t},\n\t\tonBasTutorialpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Tutorials\");\n\t\t},\n\t\tonIntTutorialpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateTutorials\");\n\t\t},\n\t\tonAdvTutorialpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedTutorials\");\n\t\t},\n\t\tonRoutPress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"RoutingTutorials\");\n\t\t},\n\t\tonIDEpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDETutorials\");\n\t\t},\n\t\tonBlogpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"BlogTutorials\");\n\t\t},\n\t\tonVideopress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"VideoTutorials\");\n\t\t},\n\t\tonInterviewpress: function() {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"InterviewTutorials\");\n\t\t}\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/Advanced_Tutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\t\tfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( {\n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  if(window.AdMob) AdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:true} );\n \n}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.Advanced_Tutorials\", {\n           onInit: function() {\n           \t// models.close();\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\n\t\t\tif(window.AdMob) {AdMob.showInterstitial();}\n\t\t\t\n\t\t}\n\t});\n\n});",
		"com/sapui5tutors/controller/Interview_Tutorials/InterviewTutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Interview_Tutorials.InterviewTutorials\", {\n\t\tonInit: function() {\n\t\t\t// models.close();\n\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuInterButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\t\n\t\t\t\n\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/IntermediateTutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.IntermediateTutorials\", {\n             onInit: function(){\n             \t// models.close();\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Video_Tutorials/VideoTutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,History,models) {\n\t\"use strict\";\n\tfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( {\n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  if(window.AdMob) AdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:true} );\n \n}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n\treturn Controller.extend(\"com.sapui5tutors.controller.Video_Tutorials.VideoTutorials\", {\n            onInit: function() {\n\t\t\t// models.close();\n\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuVidButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\t\t\n\t\t\tif(window.AdMob){ AdMob.showInterstitial();}\n\t\t},\n             onNavBack: function(){\n             \t\n   //          \tvar oHistory, sPreviousHash;\n\t\t\t// oHistory = History.getInstance();\n\t\t\t// sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// } else {\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n\t\t\t\t// this.getRouter().navTo(\"Dashboard\", {}, true /*no history*/);\n\t\t\t// }\n             \n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/Routing_Tutorials/RoutingTutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\tfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( {\n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  if(window.AdMob) AdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:true} );\n \n}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n\treturn Controller.extend(\"com.sapui5tutors.controller.Routing_Tutorials.RoutingTutorials\", {\n           onInit: function() {\n           \t// models.close();\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\n\t\t\tif(window.AdMob){ AdMob.showInterstitial();}\n\t\t\t\n\t\t}\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/Tutorials.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,models) {\n\t\"use strict\";\n\t\tfunction adSetter() {\n\t\tvar admobid = {};\n\t\t// select the right Ad Id according to platform\n\t\tif (/(android)/i.test(navigator.userAgent)) {\n\t\t\tadmobid = { // for Android\n\t\t\t\tinterstitial: 'ca-app-pub-2377379935274230/5003308503'\n\t\t\t};\n\t\t}\n\n\t\t// if (AdMob) AdMob.createBanner({\n\t\t// \t// isTesting: true, //Remove this Before publishing your app\n\t\t// \tadId: admobid.banner,\n\t\t// \tposition: AdMob.AD_POSITION.BOTTOM_CENTER,\n\t\t// \tautoShow: true\n\t\t// });\n\t\tif(window.AdMob){ \n\t\t\tAdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:false} );\n\t\t\t\n\t\t}\n\n\t}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.Tutorials\", {\n             onInit:function(){\n             \t// models.close();\n             \t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\n             \t\twindow.onbeforeunload = function(){\n              if(window.AdMob){ AdMob.showInterstitial();}\n        };\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Blog_Tutorials/BlogTutorial.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\",\n\t\"com/sapui5tutors/model/Close\"\n], function(Controller,History,models) {\n\t\"use strict\";\n\t\t\tfunction adSetter(){\nvar admobid = {};\n// select the right Ad Id according to platform\nif( /(android)/i.test(navigator.userAgent) ) { \n    admobid = { // for Android\n        banner: 'ca-app-pub-2377379935274230/5282510107',\n        interstitial: 'ca-app-pub-2377379935274230/5003308503'\n    };\n} \n \nif(window.AdMob) AdMob.createBanner( {\n    adId:admobid.banner, \n    position:AdMob.AD_POSITION.BOTTOM_CENTER, \n    autoShow:true} );\n \n  if(window.AdMob) AdMob.prepareInterstitial( {adId:admobid.interstitial, autoShow:true} );\n \n}\n\n\tfunction onDeviceReady() {\n\t\tadSetter();\n\t}\n\treturn Controller.extend(\"com.sapui5tutors.controller.Blog_Tutorials.BlogTutorial\", {\n   \n    onInit: function() {\n    \t// models.close();\n    \t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuBloButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\n              if(window.AdMob){ AdMob.showInterstitial();}\n\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/control/Image.js": "/*\r\n * Extended Image Control with Zoom-in Functionality \r\n */\r\n\r\nsap.ui.commons.Image.extend('com.sapui5tutors.control.Image',{\r\n\r\n\tmetadata : {  \r\n\t\tproperties: {\r\n\t\t\ttext: {\r\n\t\t\t\ttype: \"String\",\r\n\t\t\t\tdefaultValue:\"Title\"\r\n\t\t\t}\r\n\r\n\t\t},  \r\n\r\n\t\t// Added Aggregation for the Image\r\n\r\n\t\taggregations: {\r\n\r\n\t\t\t\"_overlay\" : {\r\n\r\n\t\t\t\ttype : \"sap.ui.commons.Dialog\",\r\n\t\t\t\tmultiple : false,\r\n\t\t\t\tvisibility:\"hidden\"\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\t/*\r\n\t * Initialize function\r\n\t */\r\n\r\n\tinit : function() {\r\n\r\n\t\t//Defining the Aggregation\r\n\r\n\t\tvar oDialog = new sap.ui.commons.Dialog({\r\n\t\t\ttitle : \"Zoomin Image\",\r\n\t\t\tcontent: [\r\n\t\t\t          new sap.m.Image({\r\n\r\n\t\t\t        \t  height: \"200%\",\r\n\t\t\t        \t  width : \"150%\"\r\n\t\t\t          })\r\n\r\n\t\t\t          ]\r\n\r\n\t\t});\r\n\r\n\t\t//Setting the Aggregation in the Control\r\n\r\n\t\tthis.setAggregation(\"_overlay\" , oDialog);\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Function is called when image is clicked.\r\n\r\n\t */\r\n\tonclick: function(){\r\n\r\n\t\t// Get the Source Image\r\n\r\n\t\tvar oImage = this.getSrc();\r\n\r\n\t\t// Get the inside Content\r\n\r\n\t\tvar oContent = this.getAggregation(\"_overlay\").getContent()[0];\r\n\r\n\t\t// Setting Image to the inside content\r\n\r\n\t\toContent.setSrc(oImage);\r\n\r\n\t\t//Open the Aggreration\r\n\r\n\t\tthis.getAggregation(\"_overlay\").open();\t\r\n\r\n\r\n\t},\r\n\r\n\r\n\r\n\trenderer : \"sap.ui.commons.ImageRenderer\"\r\n\r\n\r\n\r\n});",
		"com/sapui5tutors/cordova.js": "// Platform: android\n// 2c29e187e4206a6a77fba940ef6f77aef5c7eb8c\n/*\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file\n distributed with this work for additional information\n regarding copyright ownership.  The ASF licenses this file\n to you under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance\n with the License.  You may obtain a copy of the License at\n \n     http://www.apache.org/licenses/LICENSE-2.0\n \n Unless required by applicable law or agreed to in writing,\n software distributed under the License is distributed on an\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n*/\n;(function() {\nvar PLATFORM_VERSION_BUILD_LABEL = '4.1.1';\n// file: src/scripts/require.js\n\n/*jshint -W079 */\n/*jshint -W020 */\n\nvar require,\n    define;\n\n(function () {\n    var modules = {},\n    // Stack of moduleIds currently being built.\n        requireStack = [],\n    // Map of module ID -> index into requireStack of modules currently being built.\n        inProgressModules = {},\n        SEPARATOR = \".\";\n\n\n\n    function build(module) {\n        var factory = module.factory,\n            localRequire = function (id) {\n                var resultantId = id;\n                //Its a relative path, so lop off the last portion and add the id (minus \"./\")\n                if (id.charAt(0) === \".\") {\n                    resultantId = module.id.slice(0, module.id.lastIndexOf(SEPARATOR)) + SEPARATOR + id.slice(2);\n                }\n                return require(resultantId);\n            };\n        module.exports = {};\n        delete module.factory;\n        factory(localRequire, module.exports, module);\n        return module.exports;\n    }\n\n    require = function (id) {\n        if (!modules[id]) {\n            throw \"module \" + id + \" not found\";\n        } else if (id in inProgressModules) {\n            var cycle = requireStack.slice(inProgressModules[id]).join('->') + '->' + id;\n            throw \"Cycle in require graph: \" + cycle;\n        }\n        if (modules[id].factory) {\n            try {\n                inProgressModules[id] = requireStack.length;\n                requireStack.push(id);\n                return build(modules[id]);\n            } finally {\n                delete inProgressModules[id];\n                requireStack.pop();\n            }\n        }\n        return modules[id].exports;\n    };\n\n    define = function (id, factory) {\n        if (modules[id]) {\n            throw \"module \" + id + \" already defined\";\n        }\n\n        modules[id] = {\n            id: id,\n            factory: factory\n        };\n    };\n\n    define.remove = function (id) {\n        delete modules[id];\n    };\n\n    define.moduleMap = modules;\n})();\n\n//Export for use in node\nif (typeof module === \"object\" && typeof require === \"function\") {\n    module.exports.require = require;\n    module.exports.define = define;\n}\n\n// file: src/cordova.js\ndefine(\"cordova\", function(require, exports, module) {\n\nif(window.cordova){\n    throw new Error(\"cordova already defined\");\n}\n\n\nvar channel = require('cordova/channel');\nvar platform = require('cordova/platform');\n\n\n/**\n * Intercept calls to addEventListener + removeEventListener and handle deviceready,\n * resume, and pause events.\n */\nvar m_document_addEventListener = document.addEventListener;\nvar m_document_removeEventListener = document.removeEventListener;\nvar m_window_addEventListener = window.addEventListener;\nvar m_window_removeEventListener = window.removeEventListener;\n\n/**\n * Houses custom event handlers to intercept on document + window event listeners.\n */\nvar documentEventHandlers = {},\n    windowEventHandlers = {};\n\ndocument.addEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof documentEventHandlers[e] != 'undefined') {\n        documentEventHandlers[e].subscribe(handler);\n    } else {\n        m_document_addEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.addEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n    if (typeof windowEventHandlers[e] != 'undefined') {\n        windowEventHandlers[e].subscribe(handler);\n    } else {\n        m_window_addEventListener.call(window, evt, handler, capture);\n    }\n};\n\ndocument.removeEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof documentEventHandlers[e] != \"undefined\") {\n        documentEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_document_removeEventListener.call(document, evt, handler, capture);\n    }\n};\n\nwindow.removeEventListener = function(evt, handler, capture) {\n    var e = evt.toLowerCase();\n    // If unsubscribing from an event that is handled by a plugin\n    if (typeof windowEventHandlers[e] != \"undefined\") {\n        windowEventHandlers[e].unsubscribe(handler);\n    } else {\n        m_window_removeEventListener.call(window, evt, handler, capture);\n    }\n};\n\nfunction createEvent(type, data) {\n    var event = document.createEvent('Events');\n    event.initEvent(type, false, false);\n    if (data) {\n        for (var i in data) {\n            if (data.hasOwnProperty(i)) {\n                event[i] = data[i];\n            }\n        }\n    }\n    return event;\n}\n\n\nvar cordova = {\n    define:define,\n    require:require,\n    version:PLATFORM_VERSION_BUILD_LABEL,\n    platformVersion:PLATFORM_VERSION_BUILD_LABEL,\n    platformId:platform.id,\n    /**\n     * Methods to add/remove your own addEventListener hijacking on document + window.\n     */\n    addWindowEventHandler:function(event) {\n        return (windowEventHandlers[event] = channel.create(event));\n    },\n    addStickyDocumentEventHandler:function(event) {\n        return (documentEventHandlers[event] = channel.createSticky(event));\n    },\n    addDocumentEventHandler:function(event) {\n        return (documentEventHandlers[event] = channel.create(event));\n    },\n    removeWindowEventHandler:function(event) {\n        delete windowEventHandlers[event];\n    },\n    removeDocumentEventHandler:function(event) {\n        delete documentEventHandlers[event];\n    },\n    /**\n     * Retrieve original event handlers that were replaced by Cordova\n     *\n     * @return object\n     */\n    getOriginalHandlers: function() {\n        return {'document': {'addEventListener': m_document_addEventListener, 'removeEventListener': m_document_removeEventListener},\n        'window': {'addEventListener': m_window_addEventListener, 'removeEventListener': m_window_removeEventListener}};\n    },\n    /**\n     * Method to fire event from native code\n     * bNoDetach is required for events which cause an exception which needs to be caught in native code\n     */\n    fireDocumentEvent: function(type, data, bNoDetach) {\n        var evt = createEvent(type, data);\n        if (typeof documentEventHandlers[type] != 'undefined') {\n            if( bNoDetach ) {\n                documentEventHandlers[type].fire(evt);\n            }\n            else {\n                setTimeout(function() {\n                    // Fire deviceready on listeners that were registered before cordova.js was loaded.\n                    if (type == 'deviceready') {\n                        document.dispatchEvent(evt);\n                    }\n                    documentEventHandlers[type].fire(evt);\n                }, 0);\n            }\n        } else {\n            document.dispatchEvent(evt);\n        }\n    },\n    fireWindowEvent: function(type, data) {\n        var evt = createEvent(type,data);\n        if (typeof windowEventHandlers[type] != 'undefined') {\n            setTimeout(function() {\n                windowEventHandlers[type].fire(evt);\n            }, 0);\n        } else {\n            window.dispatchEvent(evt);\n        }\n    },\n\n    /**\n     * Plugin callback mechanism.\n     */\n    // Randomize the starting callbackId to avoid collisions after refreshing or navigating.\n    // This way, it's very unlikely that any new callback would get the same callbackId as an old callback.\n    callbackId: Math.floor(Math.random() * 2000000000),\n    callbacks:  {},\n    callbackStatus: {\n        NO_RESULT: 0,\n        OK: 1,\n        CLASS_NOT_FOUND_EXCEPTION: 2,\n        ILLEGAL_ACCESS_EXCEPTION: 3,\n        INSTANTIATION_EXCEPTION: 4,\n        MALFORMED_URL_EXCEPTION: 5,\n        IO_EXCEPTION: 6,\n        INVALID_ACTION: 7,\n        JSON_EXCEPTION: 8,\n        ERROR: 9\n    },\n\n    /**\n     * Called by native code when returning successful result from an action.\n     */\n    callbackSuccess: function(callbackId, args) {\n        cordova.callbackFromNative(callbackId, true, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning error result from an action.\n     */\n    callbackError: function(callbackId, args) {\n        // TODO: Deprecate callbackSuccess and callbackError in favour of callbackFromNative.\n        // Derive success from status.\n        cordova.callbackFromNative(callbackId, false, args.status, [args.message], args.keepCallback);\n    },\n\n    /**\n     * Called by native code when returning the result from an action.\n     */\n    callbackFromNative: function(callbackId, isSuccess, status, args, keepCallback) {\n        try {\n            var callback = cordova.callbacks[callbackId];\n            if (callback) {\n                if (isSuccess && status == cordova.callbackStatus.OK) {\n                    callback.success && callback.success.apply(null, args);\n                } else if (!isSuccess) {\n                    callback.fail && callback.fail.apply(null, args);\n                }\n                /*\n                else\n                    Note, this case is intentionally not caught.\n                    this can happen if isSuccess is true, but callbackStatus is NO_RESULT\n                    which is used to remove a callback from the list without calling the callbacks\n                    typically keepCallback is false in this case\n                */\n                // Clear callback if not expecting any more results\n                if (!keepCallback) {\n                    delete cordova.callbacks[callbackId];\n                }\n            }\n        }\n        catch (err) {\n            var msg = \"Error in \" + (isSuccess ? \"Success\" : \"Error\") + \" callbackId: \" + callbackId + \" : \" + err;\n            console && console.log && console.log(msg);\n            cordova.fireWindowEvent(\"cordovacallbackerror\", { 'message': msg });\n            throw err;\n        }\n    },\n    addConstructor: function(func) {\n        channel.onCordovaReady.subscribe(function() {\n            try {\n                func();\n            } catch(e) {\n                console.log(\"Failed to run constructor: \" + e);\n            }\n        });\n    }\n};\n\n\nmodule.exports = cordova;\n\n});\n\n// file: /Users/steveng/repo/cordova/cordova-android/cordova-js-src/android/nativeapiprovider.js\ndefine(\"cordova/android/nativeapiprovider\", function(require, exports, module) {\n\n/**\n * Exports the ExposedJsApi.java object if available, otherwise exports the PromptBasedNativeApi.\n */\n\nvar nativeApi = this._cordovaNative || require('cordova/android/promptbasednativeapi');\nvar currentApi = nativeApi;\n\nmodule.exports = {\n    get: function() { return currentApi; },\n    setPreferPrompt: function(value) {\n        currentApi = value ? require('cordova/android/promptbasednativeapi') : nativeApi;\n    },\n    // Used only by tests.\n    set: function(value) {\n        currentApi = value;\n    }\n};\n\n});\n\n// file: /Users/steveng/repo/cordova/cordova-android/cordova-js-src/android/promptbasednativeapi.js\ndefine(\"cordova/android/promptbasednativeapi\", function(require, exports, module) {\n\n/**\n * Implements the API of ExposedJsApi.java, but uses prompt() to communicate.\n * This is used pre-JellyBean, where addJavascriptInterface() is disabled.\n */\n\nmodule.exports = {\n    exec: function(bridgeSecret, service, action, callbackId, argsJson) {\n        return prompt(argsJson, 'gap:'+JSON.stringify([bridgeSecret, service, action, callbackId]));\n    },\n    setNativeToJsBridgeMode: function(bridgeSecret, value) {\n        prompt(value, 'gap_bridge_mode:' + bridgeSecret);\n    },\n    retrieveJsMessages: function(bridgeSecret, fromOnlineEvent) {\n        return prompt(+fromOnlineEvent, 'gap_poll:' + bridgeSecret);\n    }\n};\n\n});\n\n// file: src/common/argscheck.js\ndefine(\"cordova/argscheck\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nvar moduleExports = module.exports;\n\nvar typeMap = {\n    'A': 'Array',\n    'D': 'Date',\n    'N': 'Number',\n    'S': 'String',\n    'F': 'Function',\n    'O': 'Object'\n};\n\nfunction extractParamName(callee, argIndex) {\n    return (/.*?\\((.*?)\\)/).exec(callee)[1].split(', ')[argIndex];\n}\n\nfunction checkArgs(spec, functionName, args, opt_callee) {\n    if (!moduleExports.enableChecks) {\n        return;\n    }\n    var errMsg = null;\n    var typeName;\n    for (var i = 0; i < spec.length; ++i) {\n        var c = spec.charAt(i),\n            cUpper = c.toUpperCase(),\n            arg = args[i];\n        // Asterix means allow anything.\n        if (c == '*') {\n            continue;\n        }\n        typeName = utils.typeName(arg);\n        if ((arg === null || arg === undefined) && c == cUpper) {\n            continue;\n        }\n        if (typeName != typeMap[cUpper]) {\n            errMsg = 'Expected ' + typeMap[cUpper];\n            break;\n        }\n    }\n    if (errMsg) {\n        errMsg += ', but got ' + typeName + '.';\n        errMsg = 'Wrong type for parameter \"' + extractParamName(opt_callee || args.callee, i) + '\" of ' + functionName + ': ' + errMsg;\n        // Don't log when running unit tests.\n        if (typeof jasmine == 'undefined') {\n            console.error(errMsg);\n        }\n        throw TypeError(errMsg);\n    }\n}\n\nfunction getValue(value, defaultValue) {\n    return value === undefined ? defaultValue : value;\n}\n\nmoduleExports.checkArgs = checkArgs;\nmoduleExports.getValue = getValue;\nmoduleExports.enableChecks = true;\n\n\n});\n\n// file: src/common/base64.js\ndefine(\"cordova/base64\", function(require, exports, module) {\n\nvar base64 = exports;\n\nbase64.fromArrayBuffer = function(arrayBuffer) {\n    var array = new Uint8Array(arrayBuffer);\n    return uint8ToBase64(array);\n};\n\nbase64.toArrayBuffer = function(str) {\n    var decodedStr = typeof atob != 'undefined' ? atob(str) : new Buffer(str,'base64').toString('binary');\n    var arrayBuffer = new ArrayBuffer(decodedStr.length);\n    var array = new Uint8Array(arrayBuffer);\n    for (var i=0, len=decodedStr.length; i < len; i++) {\n        array[i] = decodedStr.charCodeAt(i);\n    }\n    return arrayBuffer;\n};\n\n//------------------------------------------------------------------------------\n\n/* This code is based on the performance tests at http://jsperf.com/b64tests\n * This 12-bit-at-a-time algorithm was the best performing version on all\n * platforms tested.\n */\n\nvar b64_6bit = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar b64_12bit;\n\nvar b64_12bitTable = function() {\n    b64_12bit = [];\n    for (var i=0; i<64; i++) {\n        for (var j=0; j<64; j++) {\n            b64_12bit[i*64+j] = b64_6bit[i] + b64_6bit[j];\n        }\n    }\n    b64_12bitTable = function() { return b64_12bit; };\n    return b64_12bit;\n};\n\nfunction uint8ToBase64(rawData) {\n    var numBytes = rawData.byteLength;\n    var output=\"\";\n    var segment;\n    var table = b64_12bitTable();\n    for (var i=0;i<numBytes-2;i+=3) {\n        segment = (rawData[i] << 16) + (rawData[i+1] << 8) + rawData[i+2];\n        output += table[segment >> 12];\n        output += table[segment & 0xfff];\n    }\n    if (numBytes - i == 2) {\n        segment = (rawData[i] << 16) + (rawData[i+1] << 8);\n        output += table[segment >> 12];\n        output += b64_6bit[(segment & 0xfff) >> 6];\n        output += '=';\n    } else if (numBytes - i == 1) {\n        segment = (rawData[i] << 16);\n        output += table[segment >> 12];\n        output += '==';\n    }\n    return output;\n}\n\n});\n\n// file: src/common/builder.js\ndefine(\"cordova/builder\", function(require, exports, module) {\n\nvar utils = require('cordova/utils');\n\nfunction each(objects, func, context) {\n    for (var prop in objects) {\n        if (objects.hasOwnProperty(prop)) {\n            func.apply(context, [objects[prop], prop]);\n        }\n    }\n}\n\nfunction clobber(obj, key, value) {\n    exports.replaceHookForTesting(obj, key);\n    var needsProperty = false;\n    try {\n        obj[key] = value;\n    } catch (e) {\n        needsProperty = true;\n    }\n    // Getters can only be overridden by getters.\n    if (needsProperty || obj[key] !== value) {\n        utils.defineGetter(obj, key, function() {\n            return value;\n        });\n    }\n}\n\nfunction assignOrWrapInDeprecateGetter(obj, key, value, message) {\n    if (message) {\n        utils.defineGetter(obj, key, function() {\n            console.log(message);\n            delete obj[key];\n            clobber(obj, key, value);\n            return value;\n        });\n    } else {\n        clobber(obj, key, value);\n    }\n}\n\nfunction include(parent, objects, clobber, merge) {\n    each(objects, function (obj, key) {\n        try {\n            var result = obj.path ? require(obj.path) : {};\n\n            if (clobber) {\n                // Clobber if it doesn't exist.\n                if (typeof parent[key] === 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else if (typeof obj.path !== 'undefined') {\n                    // If merging, merge properties onto parent, otherwise, clobber.\n                    if (merge) {\n                        recursiveMerge(parent[key], result);\n                    } else {\n                        assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                    }\n                }\n                result = parent[key];\n            } else {\n                // Overwrite if not currently defined.\n                if (typeof parent[key] == 'undefined') {\n                    assignOrWrapInDeprecateGetter(parent, key, result, obj.deprecated);\n                } else {\n                    // Set result to what already exists, so we can build children into it if they exist.\n                    result = parent[key];\n                }\n            }\n\n            if (obj.children) {\n                include(result, obj.children, clobber, merge);\n            }\n        } catch(e) {\n            utils.alert('Exception building Cordova JS globals: ' + e + ' for key \"' + key + '\"');\n        }\n    });\n}\n\n/**\n * Merge properties from one object onto another recursively.  Properties from\n * the src object will overwrite existing target property.\n *\n * @param target Object to merge properties into.\n * @param src Object to merge properties from.\n */\nfunction recursiveMerge(target, src) {\n    for (var prop in src) {\n        if (src.hasOwnProperty(prop)) {\n            if (target.prototype && target.prototype.constructor === target) {\n                // If the target object is a constructor override off prototype.\n                clobber(target.prototype, prop, src[prop]);\n            } else {\n                if (typeof src[prop] === 'object' && typeof target[prop] === 'object') {\n                    recursiveMerge(target[prop], src[prop]);\n                } else {\n                    clobber(target, prop, src[prop]);\n                }\n            }\n        }\n    }\n}\n\nexports.buildIntoButDoNotClobber = function(objects, target) {\n    include(target, objects, false, false);\n};\nexports.buildIntoAndClobber = function(objects, target) {\n    include(target, objects, true, false);\n};\nexports.buildIntoAndMerge = function(objects, target) {\n    include(target, objects, true, true);\n};\nexports.recursiveMerge = recursiveMerge;\nexports.assignOrWrapInDeprecateGetter = assignOrWrapInDeprecateGetter;\nexports.replaceHookForTesting = function() {};\n\n});\n\n// file: src/common/channel.js\ndefine(\"cordova/channel\", function(require, exports, module) {\n\nvar utils = require('cordova/utils'),\n    nextGuid = 1;\n\n/**\n * Custom pub-sub \"channel\" that can have functions subscribed to it\n * This object is used to define and control firing of events for\n * cordova initialization, as well as for custom events thereafter.\n *\n * The order of events during page load and Cordova startup is as follows:\n *\n * onDOMContentLoaded*         Internal event that is received when the web page is loaded and parsed.\n * onNativeReady*              Internal event that indicates the Cordova native side is ready.\n * onCordovaReady*             Internal event fired when all Cordova JavaScript objects have been created.\n * onDeviceReady*              User event fired to indicate that Cordova is ready\n * onResume                    User event fired to indicate a start/resume lifecycle event\n * onPause                     User event fired to indicate a pause lifecycle event\n *\n * The events marked with an * are sticky. Once they have fired, they will stay in the fired state.\n * All listeners that subscribe after the event is fired will be executed right away.\n *\n * The only Cordova events that user code should register for are:\n *      deviceready           Cordova native code is initialized and Cordova APIs can be called from JavaScript\n *      pause                 App has moved to background\n *      resume                App has returned to foreground\n *\n * Listeners can be registered as:\n *      document.addEventListener(\"deviceready\", myDeviceReadyListener, false);\n *      document.addEventListener(\"resume\", myResumeListener, false);\n *      document.addEventListener(\"pause\", myPauseListener, false);\n *\n * The DOM lifecycle events should be used for saving and restoring state\n *      window.onload\n *      window.onunload\n *\n */\n\n/**\n * Channel\n * @constructor\n * @param type  String the channel name\n */\nvar Channel = function(type, sticky) {\n    this.type = type;\n    // Map of guid -> function.\n    this.handlers = {};\n    // 0 = Non-sticky, 1 = Sticky non-fired, 2 = Sticky fired.\n    this.state = sticky ? 1 : 0;\n    // Used in sticky mode to remember args passed to fire().\n    this.fireArgs = null;\n    // Used by onHasSubscribersChange to know if there are any listeners.\n    this.numHandlers = 0;\n    // Function that is called when the first listener is subscribed, or when\n    // the last listener is unsubscribed.\n    this.onHasSubscribersChange = null;\n},\n    channel = {\n        /**\n         * Calls the provided function only after all of the channels specified\n         * have been fired. All channels must be sticky channels.\n         */\n        join: function(h, c) {\n            var len = c.length,\n                i = len,\n                f = function() {\n                    if (!(--i)) h();\n                };\n            for (var j=0; j<len; j++) {\n                if (c[j].state === 0) {\n                    throw Error('Can only use join with sticky channels.');\n                }\n                c[j].subscribe(f);\n            }\n            if (!len) h();\n        },\n        create: function(type) {\n            return channel[type] = new Channel(type, false);\n        },\n        createSticky: function(type) {\n            return channel[type] = new Channel(type, true);\n        },\n\n        /**\n         * cordova Channels that must fire before \"deviceready\" is fired.\n         */\n        deviceReadyChannelsArray: [],\n        deviceReadyChannelsMap: {},\n\n        /**\n         * Indicate that a feature needs to be initialized before it is ready to be used.\n         * This holds up Cordova's \"deviceready\" event until the feature has been initialized\n         * and Cordova.initComplete(feature) is called.\n         *\n         * @param feature {String}     The unique feature name\n         */\n        waitForInitialization: function(feature) {\n            if (feature) {\n                var c = channel[feature] || this.createSticky(feature);\n                this.deviceReadyChannelsMap[feature] = c;\n                this.deviceReadyChannelsArray.push(c);\n            }\n        },\n\n        /**\n         * Indicate that initialization code has completed and the feature is ready to be used.\n         *\n         * @param feature {String}     The unique feature name\n         */\n        initializationComplete: function(feature) {\n            var c = this.deviceReadyChannelsMap[feature];\n            if (c) {\n                c.fire();\n            }\n        }\n    };\n\nfunction forceFunction(f) {\n    if (typeof f != 'function') throw \"Function required as first argument!\";\n}\n\n/**\n * Subscribes the given function to the channel. Any time that\n * Channel.fire is called so too will the function.\n * Optionally specify an execution context for the function\n * and a guid that can be used to stop subscribing to the channel.\n * Returns the guid.\n */\nChannel.prototype.subscribe = function(f, c) {\n    // need a function to call\n    forceFunction(f);\n    if (this.state == 2) {\n        f.apply(c || this, this.fireArgs);\n        return;\n    }\n\n    var func = f,\n        guid = f.observer_guid;\n    if (typeof c == \"object\") { func = utils.close(c, f); }\n\n    if (!guid) {\n        // first time any channel has seen this subscriber\n        guid = '' + nextGuid++;\n    }\n    func.observer_guid = guid;\n    f.observer_guid = guid;\n\n    // Don't add the same handler more than once.\n    if (!this.handlers[guid]) {\n        this.handlers[guid] = func;\n        this.numHandlers++;\n        if (this.numHandlers == 1) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Unsubscribes the function with the given guid from the channel.\n */\nChannel.prototype.unsubscribe = function(f) {\n    // need a function to unsubscribe\n    forceFunction(f);\n\n    var guid = f.observer_guid,\n        handler = this.handlers[guid];\n    if (handler) {\n        delete this.handlers[guid];\n        this.numHandlers--;\n        if (this.numHandlers === 0) {\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n/**\n * Calls all functions subscribed to this channel.\n */\nChannel.prototype.fire = function(e) {\n    var fail = false,\n        fireArgs = Array.prototype.slice.call(arguments);\n    // Apply stickiness.\n    if (this.state == 1) {\n        this.state = 2;\n        this.fireArgs = fireArgs;\n    }\n    if (this.numHandlers) {\n        // Copy the values first so that it is safe to modify it from within\n        // callbacks.\n        var toCall = [];\n        for (var item in this.handlers) {\n            toCall.push(this.handlers[item]);\n        }\n        for (var i = 0; i < toCall.length; ++i) {\n            toCall[i].apply(this, fireArgs);\n        }\n        if (this.state == 2 && this.numHandlers) {\n            this.numHandlers = 0;\n            this.handlers = {};\n            this.onHasSubscribersChange && this.onHasSubscribersChange();\n        }\n    }\n};\n\n\n// defining them here so they are ready super fast!\n// DOM event that is received when the web page is loaded and parsed.\nchannel.createSticky('onDOMContentLoaded');\n\n// Event to indicate the Cordova native side is ready.\nchannel.createSticky('onNativeReady');\n\n// Event to indicate that all Cordova JavaScript objects have been created\n// and it's time to run plugin constructors.\nchannel.createSticky('onCordovaReady');\n\n// Event to indicate that all automatically loaded JS plugins are loaded and ready.\n// FIXME remove this\nchannel.createSticky('onPluginsReady');\n\n// Event to indicate that Cordova is ready\nchannel.createSticky('onDeviceReady');\n\n// Event to indicate a resume lifecycle event\nchannel.create('onResume');\n\n// Event to indicate a pause lifecycle event\nchannel.create('onPause');\n\n// Channels that must fire before \"deviceready\" is fired.\nchannel.waitForInitialization('onCordovaReady');\nchannel.waitForInitialization('onDOMContentLoaded');\n\nmodule.exports = channel;\n\n});\n\n// file: /Users/steveng/repo/cordova/cordova-android/cordova-js-src/exec.js\ndefine(\"cordova/exec\", function(require, exports, module) {\n\n/**\n * Execute a cordova command.  It is up to the native side whether this action\n * is synchronous or asynchronous.  The native side can return:\n *      Synchronous: PluginResult object as a JSON string\n *      Asynchronous: Empty string \"\"\n * If async, the native side will cordova.callbackSuccess or cordova.callbackError,\n * depending upon the result of the action.\n *\n * @param {Function} success    The success callback\n * @param {Function} fail       The fail callback\n * @param {String} service      The name of the service to use\n * @param {String} action       Action to be run in cordova\n * @param {String[]} [args]     Zero or more arguments to pass to the method\n */\nvar cordova = require('cordova'),\n    nativeApiProvider = require('cordova/android/nativeapiprovider'),\n    utils = require('cordova/utils'),\n    base64 = require('cordova/base64'),\n    channel = require('cordova/channel'),\n    jsToNativeModes = {\n        PROMPT: 0,\n        JS_OBJECT: 1\n    },\n    nativeToJsModes = {\n        // Polls for messages using the JS->Native bridge.\n        POLLING: 0,\n        // For LOAD_URL to be viable, it would need to have a work-around for\n        // the bug where the soft-keyboard gets dismissed when a message is sent.\n        LOAD_URL: 1,\n        // For the ONLINE_EVENT to be viable, it would need to intercept all event\n        // listeners (both through addEventListener and window.ononline) as well\n        // as set the navigator property itself.\n        ONLINE_EVENT: 2\n    },\n    jsToNativeBridgeMode,  // Set lazily.\n    nativeToJsBridgeMode = nativeToJsModes.ONLINE_EVENT,\n    pollEnabled = false,\n    bridgeSecret = -1;\n\nvar messagesFromNative = [];\nvar isProcessing = false;\nvar resolvedPromise = typeof Promise == 'undefined' ? null : Promise.resolve();\nvar nextTick = resolvedPromise ? function(fn) { resolvedPromise.then(fn); } : function(fn) { setTimeout(fn); };\n\nfunction androidExec(success, fail, service, action, args) {\n    if (bridgeSecret < 0) {\n        // If we ever catch this firing, we'll need to queue up exec()s\n        // and fire them once we get a secret. For now, I don't think\n        // it's possible for exec() to be called since plugins are parsed but\n        // not run until until after onNativeReady.\n        throw new Error('exec() called without bridgeSecret');\n    }\n    // Set default bridge modes if they have not already been set.\n    // By default, we use the failsafe, since addJavascriptInterface breaks too often\n    if (jsToNativeBridgeMode === undefined) {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    }\n\n    // Process any ArrayBuffers in the args into a string.\n    for (var i = 0; i < args.length; i++) {\n        if (utils.typeName(args[i]) == 'ArrayBuffer') {\n            args[i] = base64.fromArrayBuffer(args[i]);\n        }\n    }\n\n    var callbackId = service + cordova.callbackId++,\n        argsJson = JSON.stringify(args);\n\n    if (success || fail) {\n        cordova.callbacks[callbackId] = {success:success, fail:fail};\n    }\n\n    var msgs = nativeApiProvider.get().exec(bridgeSecret, service, action, callbackId, argsJson);\n    // If argsJson was received by Java as null, try again with the PROMPT bridge mode.\n    // This happens in rare circumstances, such as when certain Unicode characters are passed over the bridge on a Galaxy S2.  See CB-2666.\n    if (jsToNativeBridgeMode == jsToNativeModes.JS_OBJECT && msgs === \"@Null arguments.\") {\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.PROMPT);\n        androidExec(success, fail, service, action, args);\n        androidExec.setJsToNativeBridgeMode(jsToNativeModes.JS_OBJECT);\n    } else if (msgs) {\n        messagesFromNative.push(msgs);\n        // Always process async to avoid exceptions messing up stack.\n        nextTick(processMessages);\n    }\n}\n\nandroidExec.init = function() {\n    bridgeSecret = +prompt('', 'gap_init:' + nativeToJsBridgeMode);\n    channel.onNativeReady.fire();\n};\n\nfunction pollOnceFromOnlineEvent() {\n    pollOnce(true);\n}\n\nfunction pollOnce(opt_fromOnlineEvent) {\n    if (bridgeSecret < 0) {\n        // This can happen when the NativeToJsMessageQueue resets the online state on page transitions.\n        // We know there's nothing to retrieve, so no need to poll.\n        return;\n    }\n    var msgs = nativeApiProvider.get().retrieveJsMessages(bridgeSecret, !!opt_fromOnlineEvent);\n    if (msgs) {\n        messagesFromNative.push(msgs);\n        // Process sync since we know we're already top-of-stack.\n        processMessages();\n    }\n}\n\nfunction pollingTimerFunc() {\n    if (pollEnabled) {\n        pollOnce();\n        setTimeout(pollingTimerFunc, 50);\n    }\n}\n\nfunction hookOnlineApis() {\n    function proxyEvent(e) {\n        cordova.fireWindowEvent(e.type);\n    }\n    // The network module takes care of firing online and offline events.\n    // It currently fires them only on document though, so we bridge them\n    // to window here (while first listening for exec()-releated online/offline\n    // events).\n    window.addEventListener('online', pollOnceFromOnlineEvent, false);\n    window.addEventListener('offline', pollOnceFromOnlineEvent, false);\n    cordova.addWindowEventHandler('online');\n    cordova.addWindowEventHandler('offline');\n    document.addEventListener('online', proxyEvent, false);\n    document.addEventListener('offline', proxyEvent, false);\n}\n\nhookOnlineApis();\n\nandroidExec.jsToNativeModes = jsToNativeModes;\nandroidExec.nativeToJsModes = nativeToJsModes;\n\nandroidExec.setJsToNativeBridgeMode = function(mode) {\n    if (mode == jsToNativeModes.JS_OBJECT && !window._cordovaNative) {\n        mode = jsToNativeModes.PROMPT;\n    }\n    nativeApiProvider.setPreferPrompt(mode == jsToNativeModes.PROMPT);\n    jsToNativeBridgeMode = mode;\n};\n\nandroidExec.setNativeToJsBridgeMode = function(mode) {\n    if (mode == nativeToJsBridgeMode) {\n        return;\n    }\n    if (nativeToJsBridgeMode == nativeToJsModes.POLLING) {\n        pollEnabled = false;\n    }\n\n    nativeToJsBridgeMode = mode;\n    // Tell the native side to switch modes.\n    // Otherwise, it will be set by androidExec.init()\n    if (bridgeSecret >= 0) {\n        nativeApiProvider.get().setNativeToJsBridgeMode(bridgeSecret, mode);\n    }\n\n    if (mode == nativeToJsModes.POLLING) {\n        pollEnabled = true;\n        setTimeout(pollingTimerFunc, 1);\n    }\n};\n\nfunction buildPayload(payload, message) {\n    var payloadKind = message.charAt(0);\n    if (payloadKind == 's') {\n        payload.push(message.slice(1));\n    } else if (payloadKind == 't') {\n        payload.push(true);\n    } else if (payloadKind == 'f') {\n        payload.push(false);\n    } else if (payloadKind == 'N') {\n        payload.push(null);\n    } else if (payloadKind == 'n') {\n        payload.push(+message.slice(1));\n    } else if (payloadKind == 'A') {\n        var data = message.slice(1);\n        payload.push(base64.toArrayBuffer(data));\n    } else if (payloadKind == 'S') {\n        payload.push(window.atob(message.slice(1)));\n    } else if (payloadKind == 'M') {\n        var multipartMessages = message.slice(1);\n        while (multipartMessages !== \"\") {\n            var spaceIdx = multipartMessages.indexOf(' ');\n            var msgLen = +multipartMessages.slice(0, spaceIdx);\n            var multipartMessage = multipartMessages.substr(spaceIdx + 1, msgLen);\n            multipartMessages = multipartMessages.slice(spaceIdx + msgLen + 1);\n            buildPayload(payload, multipartMessage);\n        }\n    } else {\n        payload.push(JSON.parse(message));\n    }\n}\n\n// Processes a single message, as encoded by NativeToJsMessageQueue.java.\nfunction processMessage(message) {\n    var firstChar = message.charAt(0);\n    if (firstChar == 'J') {\n        // This is deprecated on the .java side. It doesn't work with CSP enabled.\n        eval(message.slice(1));\n    } else if (firstChar == 'S' || firstChar == 'F') {\n        var success = firstChar == 'S';\n        var keepCallback = message.charAt(1) == '1';\n        var spaceIdx = message.indexOf(' ', 2);\n        var status = +message.slice(2, spaceIdx);\n        var nextSpaceIdx = message.indexOf(' ', spaceIdx + 1);\n        var callbackId = message.slice(spaceIdx + 1, nextSpaceIdx);\n        var payloadMessage = message.slice(nextSpaceIdx + 1);\n        var payload = [];\n        buildPayload(payload, payloadMessage);\n        cordova.callbackFromNative(callbackId, success, status, payload, keepCallback);\n    } else {\n        console.log(\"processMessage failed: invalid message: \" + JSON.stringify(message));\n    }\n}\n\nfunction processMessages() {\n    // Check for the reentrant case.\n    if (isProcessing) {\n        return;\n    }\n    if (messagesFromNative.length === 0) {\n        return;\n    }\n    isProcessing = true;\n    try {\n        var msg = popMessageFromQueue();\n        // The Java side can send a * message to indicate that it\n        // still has messages waiting to be retrieved.\n        if (msg == '*' && messagesFromNative.length === 0) {\n            nextTick(pollOnce);\n            return;\n        }\n        processMessage(msg);\n    } finally {\n        isProcessing = false;\n        if (messagesFromNative.length > 0) {\n            nextTick(processMessages);\n        }\n    }\n}\n\nfunction popMessageFromQueue() {\n    var messageBatch = messagesFromNative.shift();\n    if (messageBatch == '*') {\n        return '*';\n    }\n\n    var spaceIdx = messageBatch.indexOf(' ');\n    var msgLen = +messageBatch.slice(0, spaceIdx);\n    var message = messageBatch.substr(spaceIdx + 1, msgLen);\n    messageBatch = messageBatch.slice(spaceIdx + msgLen + 1);\n    if (messageBatch) {\n        messagesFromNative.unshift(messageBatch);\n    }\n    return message;\n}\n\nmodule.exports = androidExec;\n\n});\n\n// file: src/common/exec/proxy.js\ndefine(\"cordova/exec/proxy\", function(require, exports, module) {\n\n\n// internal map of proxy function\nvar CommandProxyMap = {};\n\nmodule.exports = {\n\n    // example: cordova.commandProxy.add(\"Accelerometer\",{getCurrentAcceleration: function(successCallback, errorCallback, options) {...},...);\n    add:function(id,proxyObj) {\n        console.log(\"adding proxy for \" + id);\n        CommandProxyMap[id] = proxyObj;\n        return proxyObj;\n    },\n\n    // cordova.commandProxy.remove(\"Accelerometer\");\n    remove:function(id) {\n        var proxy = CommandProxyMap[id];\n        delete CommandProxyMap[id];\n        CommandProxyMap[id] = null;\n        return proxy;\n    },\n\n    get:function(service,action) {\n        return ( CommandProxyMap[service] ? CommandProxyMap[service][action] : null );\n    }\n};\n});\n\n// file: src/common/init.js\ndefine(\"cordova/init\", function(require, exports, module) {\n\nvar channel = require('cordova/channel');\nvar cordova = require('cordova');\nvar modulemapper = require('cordova/modulemapper');\nvar platform = require('cordova/platform');\nvar pluginloader = require('cordova/pluginloader');\nvar utils = require('cordova/utils');\n\nvar platformInitChannelsArray = [channel.onNativeReady, channel.onPluginsReady];\n\nfunction logUnfiredChannels(arr) {\n    for (var i = 0; i < arr.length; ++i) {\n        if (arr[i].state != 2) {\n            console.log('Channel not fired: ' + arr[i].type);\n        }\n    }\n}\n\nwindow.setTimeout(function() {\n    if (channel.onDeviceReady.state != 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}, 5000);\n\n// Replace navigator before any modules are required(), to ensure it happens as soon as possible.\n// We replace it so that properties that can't be clobbered can instead be overridden.\nfunction replaceNavigator(origNavigator) {\n    var CordovaNavigator = function() {};\n    CordovaNavigator.prototype = origNavigator;\n    var newNavigator = new CordovaNavigator();\n    // This work-around really only applies to new APIs that are newer than Function.bind.\n    // Without it, APIs such as getGamepads() break.\n    if (CordovaNavigator.bind) {\n        for (var key in origNavigator) {\n            if (typeof origNavigator[key] == 'function') {\n                newNavigator[key] = origNavigator[key].bind(origNavigator);\n            }\n            else {\n                (function(k) {\n                    utils.defineGetterSetter(newNavigator,key,function() {\n                        return origNavigator[k];\n                    });\n                })(key);\n            }\n        }\n    }\n    return newNavigator;\n}\n\nif (window.navigator) {\n    window.navigator = replaceNavigator(window.navigator);\n}\n\nif (!window.console) {\n    window.console = {\n        log: function(){}\n    };\n}\nif (!window.console.warn) {\n    window.console.warn = function(msg) {\n        this.log(\"warn: \" + msg);\n    };\n}\n\n// Register pause, resume and deviceready channels as events on document.\nchannel.onPause = cordova.addDocumentEventHandler('pause');\nchannel.onResume = cordova.addDocumentEventHandler('resume');\nchannel.onActivated = cordova.addDocumentEventHandler('activated');\nchannel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');\n\n// Listen for DOMContentLoaded and notify our channel subscribers.\nif (document.readyState == 'complete' || document.readyState == 'interactive') {\n    channel.onDOMContentLoaded.fire();\n} else {\n    document.addEventListener('DOMContentLoaded', function() {\n        channel.onDOMContentLoaded.fire();\n    }, false);\n}\n\n// _nativeReady is global variable that the native side can set\n// to signify that the native code is ready. It is a global since\n// it may be called before any cordova JS is ready.\nif (window._nativeReady) {\n    channel.onNativeReady.fire();\n}\n\nmodulemapper.clobbers('cordova', 'cordova');\nmodulemapper.clobbers('cordova/exec', 'cordova.exec');\nmodulemapper.clobbers('cordova/exec', 'Cordova.exec');\n\n// Call the platform-specific initialization.\nplatform.bootstrap && platform.bootstrap();\n\n// Wrap in a setTimeout to support the use-case of having plugin JS appended to cordova.js.\n// The delay allows the attached modules to be defined before the plugin loader looks for them.\nsetTimeout(function() {\n    pluginloader.load(function() {\n        channel.onPluginsReady.fire();\n    });\n}, 0);\n\n/**\n * Create all cordova objects once native side is ready.\n */\nchannel.join(function() {\n    modulemapper.mapModules(window);\n\n    platform.initialize && platform.initialize();\n\n    // Fire event to notify that all objects are created\n    channel.onCordovaReady.fire();\n\n    // Fire onDeviceReady event once page has fully loaded, all\n    // constructors have run and cordova info has been received from native\n    // side.\n    channel.join(function() {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n\n}, platformInitChannelsArray);\n\n\n});\n\n// file: src/common/init_b.js\ndefine(\"cordova/init_b\", function(require, exports, module) {\n\nvar channel = require('cordova/channel');\nvar cordova = require('cordova');\nvar platform = require('cordova/platform');\nvar utils = require('cordova/utils');\n\nvar platformInitChannelsArray = [channel.onDOMContentLoaded, channel.onNativeReady];\n\n// setting exec\ncordova.exec = require('cordova/exec');\n\nfunction logUnfiredChannels(arr) {\n    for (var i = 0; i < arr.length; ++i) {\n        if (arr[i].state != 2) {\n            console.log('Channel not fired: ' + arr[i].type);\n        }\n    }\n}\n\nwindow.setTimeout(function() {\n    if (channel.onDeviceReady.state != 2) {\n        console.log('deviceready has not fired after 5 seconds.');\n        logUnfiredChannels(platformInitChannelsArray);\n        logUnfiredChannels(channel.deviceReadyChannelsArray);\n    }\n}, 5000);\n\n// Replace navigator before any modules are required(), to ensure it happens as soon as possible.\n// We replace it so that properties that can't be clobbered can instead be overridden.\nfunction replaceNavigator(origNavigator) {\n    var CordovaNavigator = function() {};\n    CordovaNavigator.prototype = origNavigator;\n    var newNavigator = new CordovaNavigator();\n    // This work-around really only applies to new APIs that are newer than Function.bind.\n    // Without it, APIs such as getGamepads() break.\n    if (CordovaNavigator.bind) {\n        for (var key in origNavigator) {\n            if (typeof origNavigator[key] == 'function') {\n                newNavigator[key] = origNavigator[key].bind(origNavigator);\n            }\n            else {\n                (function(k) {\n                    utils.defineGetterSetter(newNavigator,key,function() {\n                        return origNavigator[k];\n                    });\n                })(key);\n            }\n        }\n    }\n    return newNavigator;\n}\nif (window.navigator) {\n    window.navigator = replaceNavigator(window.navigator);\n}\n\nif (!window.console) {\n    window.console = {\n        log: function(){}\n    };\n}\nif (!window.console.warn) {\n    window.console.warn = function(msg) {\n        this.log(\"warn: \" + msg);\n    };\n}\n\n// Register pause, resume and deviceready channels as events on document.\nchannel.onPause = cordova.addDocumentEventHandler('pause');\nchannel.onResume = cordova.addDocumentEventHandler('resume');\nchannel.onActivated = cordova.addDocumentEventHandler('activated');\nchannel.onDeviceReady = cordova.addStickyDocumentEventHandler('deviceready');\n\n// Listen for DOMContentLoaded and notify our channel subscribers.\nif (document.readyState == 'complete' || document.readyState == 'interactive') {\n    channel.onDOMContentLoaded.fire();\n} else {\n    document.addEventListener('DOMContentLoaded', function() {\n        channel.onDOMContentLoaded.fire();\n    }, false);\n}\n\n// _nativeReady is global variable that the native side can set\n// to signify that the native code is ready. It is a global since\n// it may be called before any cordova JS is ready.\nif (window._nativeReady) {\n    channel.onNativeReady.fire();\n}\n\n// Call the platform-specific initialization.\nplatform.bootstrap && platform.bootstrap();\n\n/**\n * Create all cordova objects once native side is ready.\n */\nchannel.join(function() {\n\n    platform.initialize && platform.initialize();\n\n    // Fire event to notify that all objects are created\n    channel.onCordovaReady.fire();\n\n    // Fire onDeviceReady event once page has fully loaded, all\n    // constructors have run and cordova info has been received from native\n    // side.\n    channel.join(function() {\n        require('cordova').fireDocumentEvent('deviceready');\n    }, channel.deviceReadyChannelsArray);\n\n}, platformInitChannelsArray);\n\n});\n\n// file: src/common/modulemapper.js\ndefine(\"cordova/modulemapper\", function(require, exports, module) {\n\nvar builder = require('cordova/builder'),\n    moduleMap = define.moduleMap,\n    symbolList,\n    deprecationMap;\n\nexports.reset = function() {\n    symbolList = [];\n    deprecationMap = {};\n};\n\nfunction addEntry(strategy, moduleName, symbolPath, opt_deprecationMessage) {\n    if (!(moduleName in moduleMap)) {\n        throw new Error('Module ' + moduleName + ' does not exist.');\n    }\n    symbolList.push(strategy, moduleName, symbolPath);\n    if (opt_deprecationMessage) {\n        deprecationMap[symbolPath] = opt_deprecationMessage;\n    }\n}\n\n// Note: Android 2.3 does have Function.bind().\nexports.clobbers = function(moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('c', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.merges = function(moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('m', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.defaults = function(moduleName, symbolPath, opt_deprecationMessage) {\n    addEntry('d', moduleName, symbolPath, opt_deprecationMessage);\n};\n\nexports.runs = function(moduleName) {\n    addEntry('r', moduleName, null);\n};\n\nfunction prepareNamespace(symbolPath, context) {\n    if (!symbolPath) {\n        return context;\n    }\n    var parts = symbolPath.split('.');\n    var cur = context;\n    for (var i = 0, part; part = parts[i]; ++i) {\n        cur = cur[part] = cur[part] || {};\n    }\n    return cur;\n}\n\nexports.mapModules = function(context) {\n    var origSymbols = {};\n    context.CDV_origSymbols = origSymbols;\n    for (var i = 0, len = symbolList.length; i < len; i += 3) {\n        var strategy = symbolList[i];\n        var moduleName = symbolList[i + 1];\n        var module = require(moduleName);\n        // <runs/>\n        if (strategy == 'r') {\n            continue;\n        }\n        var symbolPath = symbolList[i + 2];\n        var lastDot = symbolPath.lastIndexOf('.');\n        var namespace = symbolPath.substr(0, lastDot);\n        var lastName = symbolPath.substr(lastDot + 1);\n\n        var deprecationMsg = symbolPath in deprecationMap ? 'Access made to deprecated symbol: ' + symbolPath + '. ' + deprecationMsg : null;\n        var parentObj = prepareNamespace(namespace, context);\n        var target = parentObj[lastName];\n\n        if (strategy == 'm' && target) {\n            builder.recursiveMerge(target, module);\n        } else if ((strategy == 'd' && !target) || (strategy != 'd')) {\n            if (!(symbolPath in origSymbols)) {\n                origSymbols[symbolPath] = target;\n            }\n            builder.assignOrWrapInDeprecateGetter(parentObj, lastName, module, deprecationMsg);\n        }\n    }\n};\n\nexports.getOriginalSymbol = function(context, symbolPath) {\n    var origSymbols = context.CDV_origSymbols;\n    if (origSymbols && (symbolPath in origSymbols)) {\n        return origSymbols[symbolPath];\n    }\n    var parts = symbolPath.split('.');\n    var obj = context;\n    for (var i = 0; i < parts.length; ++i) {\n        obj = obj && obj[parts[i]];\n    }\n    return obj;\n};\n\nexports.reset();\n\n\n});\n\n// file: /Users/steveng/repo/cordova/cordova-android/cordova-js-src/platform.js\ndefine(\"cordova/platform\", function(require, exports, module) {\n\nmodule.exports = {\n    id: 'android',\n    bootstrap: function() {\n        var channel = require('cordova/channel'),\n            cordova = require('cordova'),\n            exec = require('cordova/exec'),\n            modulemapper = require('cordova/modulemapper');\n\n        // Get the shared secret needed to use the bridge.\n        exec.init();\n\n        // TODO: Extract this as a proper plugin.\n        modulemapper.clobbers('cordova/plugin/android/app', 'navigator.app');\n\n        var APP_PLUGIN_NAME = Number(cordova.platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\n        // Inject a listener for the backbutton on the document.\n        var backButtonChannel = cordova.addDocumentEventHandler('backbutton');\n        backButtonChannel.onHasSubscribersChange = function() {\n            // If we just attached the first handler or detached the last handler,\n            // let native know we need to override the back button.\n            exec(null, null, APP_PLUGIN_NAME, \"overrideBackbutton\", [this.numHandlers == 1]);\n        };\n\n        // Add hardware MENU and SEARCH button handlers\n        cordova.addDocumentEventHandler('menubutton');\n        cordova.addDocumentEventHandler('searchbutton');\n\n        function bindButtonChannel(buttonName) {\n            // generic button bind used for volumeup/volumedown buttons\n            var volumeButtonChannel = cordova.addDocumentEventHandler(buttonName + 'button');\n            volumeButtonChannel.onHasSubscribersChange = function() {\n                exec(null, null, APP_PLUGIN_NAME, \"overrideButton\", [buttonName, this.numHandlers == 1]);\n            };\n        }\n        // Inject a listener for the volume buttons on the document.\n        bindButtonChannel('volumeup');\n        bindButtonChannel('volumedown');\n\n        // Let native code know we are all done on the JS side.\n        // Native code will then un-hide the WebView.\n        channel.onCordovaReady.subscribe(function() {\n            exec(onMessageFromNative, null, APP_PLUGIN_NAME, 'messageChannel', []);\n            exec(null, null, APP_PLUGIN_NAME, \"show\", []);\n        });\n    }\n};\n\nfunction onMessageFromNative(msg) {\n    var cordova = require('cordova');\n    var action = msg.action;\n\n    switch (action)\n    {\n        // Button events\n        case 'backbutton':\n        case 'menubutton':\n        case 'searchbutton':\n        // App life cycle events\n        case 'pause':\n        case 'resume':\n        // Volume events\n        case 'volumedownbutton':\n        case 'volumeupbutton':\n            cordova.fireDocumentEvent(action);\n            break;\n        default:\n            throw new Error('Unknown event action ' + action);\n    }\n}\n\n});\n\n// file: /Users/steveng/repo/cordova/cordova-android/cordova-js-src/plugin/android/app.js\ndefine(\"cordova/plugin/android/app\", function(require, exports, module) {\n\nvar exec = require('cordova/exec');\nvar APP_PLUGIN_NAME = Number(require('cordova').platformVersion.split('.')[0]) >= 4 ? 'CoreAndroid' : 'App';\n\nmodule.exports = {\n    /**\n    * Clear the resource cache.\n    */\n    clearCache:function() {\n        exec(null, null, APP_PLUGIN_NAME, \"clearCache\", []);\n    },\n\n    /**\n    * Load the url into the webview or into new browser instance.\n    *\n    * @param url           The URL to load\n    * @param props         Properties that can be passed in to the activity:\n    *      wait: int                           => wait msec before loading URL\n    *      loadingDialog: \"Title,Message\"      => display a native loading dialog\n    *      loadUrlTimeoutValue: int            => time in msec to wait before triggering a timeout error\n    *      clearHistory: boolean              => clear webview history (default=false)\n    *      openExternal: boolean              => open in a new browser (default=false)\n    *\n    * Example:\n    *      navigator.app.loadUrl(\"http://server/myapp/index.html\", {wait:2000, loadingDialog:\"Wait,Loading App\", loadUrlTimeoutValue: 60000});\n    */\n    loadUrl:function(url, props) {\n        exec(null, null, APP_PLUGIN_NAME, \"loadUrl\", [url, props]);\n    },\n\n    /**\n    * Cancel loadUrl that is waiting to be loaded.\n    */\n    cancelLoadUrl:function() {\n        exec(null, null, APP_PLUGIN_NAME, \"cancelLoadUrl\", []);\n    },\n\n    /**\n    * Clear web history in this web view.\n    * Instead of BACK button loading the previous web page, it will exit the app.\n    */\n    clearHistory:function() {\n        exec(null, null, APP_PLUGIN_NAME, \"clearHistory\", []);\n    },\n\n    /**\n    * Go to previous page displayed.\n    * This is the same as pressing the backbutton on Android device.\n    */\n    backHistory:function() {\n        exec(null, null, APP_PLUGIN_NAME, \"backHistory\", []);\n    },\n\n    /**\n    * Override the default behavior of the Android back button.\n    * If overridden, when the back button is pressed, the \"backKeyDown\" JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"backbutton\" event, this is automatically done.\n    *\n    * @param override        T=override, F=cancel override\n    */\n    overrideBackbutton:function(override) {\n        exec(null, null, APP_PLUGIN_NAME, \"overrideBackbutton\", [override]);\n    },\n\n    /**\n    * Override the default behavior of the Android volume button.\n    * If overridden, when the volume button is pressed, the \"volume[up|down]button\"\n    * JavaScript event will be fired.\n    *\n    * Note: The user should not have to call this method.  Instead, when the user\n    *       registers for the \"volume[up|down]button\" event, this is automatically done.\n    *\n    * @param button          volumeup, volumedown\n    * @param override        T=override, F=cancel override\n    */\n    overrideButton:function(button, override) {\n        exec(null, null, APP_PLUGIN_NAME, \"overrideButton\", [button, override]);\n    },\n\n    /**\n    * Exit and terminate the application.\n    */\n    exitApp:function() {\n        return exec(null, null, APP_PLUGIN_NAME, \"exitApp\", []);\n    }\n};\n\n});\n\n// file: src/common/pluginloader.js\ndefine(\"cordova/pluginloader\", function(require, exports, module) {\n\n/*\n    NOTE: this file is NOT used when we use the browserify workflow\n*/\n\nvar modulemapper = require('cordova/modulemapper');\nvar urlutil = require('cordova/urlutil');\n\n// Helper function to inject a <script> tag.\n// Exported for testing.\nexports.injectScript = function(url, onload, onerror) {\n    var script = document.createElement(\"script\");\n    // onload fires even when script fails loads with an error.\n    script.onload = onload;\n    // onerror fires for malformed URLs.\n    script.onerror = onerror;\n    script.src = url;\n    document.head.appendChild(script);\n};\n\nfunction injectIfNecessary(id, url, onload, onerror) {\n    onerror = onerror || onload;\n    if (id in define.moduleMap) {\n        onload();\n    } else {\n        exports.injectScript(url, function() {\n            if (id in define.moduleMap) {\n                onload();\n            } else {\n                onerror();\n            }\n        }, onerror);\n    }\n}\n\nfunction onScriptLoadingComplete(moduleList, finishPluginLoading) {\n    // Loop through all the plugins and then through their clobbers and merges.\n    for (var i = 0, module; module = moduleList[i]; i++) {\n        if (module.clobbers && module.clobbers.length) {\n            for (var j = 0; j < module.clobbers.length; j++) {\n                modulemapper.clobbers(module.id, module.clobbers[j]);\n            }\n        }\n\n        if (module.merges && module.merges.length) {\n            for (var k = 0; k < module.merges.length; k++) {\n                modulemapper.merges(module.id, module.merges[k]);\n            }\n        }\n\n        // Finally, if runs is truthy we want to simply require() the module.\n        if (module.runs) {\n            modulemapper.runs(module.id);\n        }\n    }\n\n    finishPluginLoading();\n}\n\n// Handler for the cordova_plugins.js content.\n// See plugman's plugin_loader.js for the details of this object.\n// This function is only called if the really is a plugins array that isn't empty.\n// Otherwise the onerror response handler will just call finishPluginLoading().\nfunction handlePluginsObject(path, moduleList, finishPluginLoading) {\n    // Now inject the scripts.\n    var scriptCounter = moduleList.length;\n\n    if (!scriptCounter) {\n        finishPluginLoading();\n        return;\n    }\n    function scriptLoadedCallback() {\n        if (!--scriptCounter) {\n            onScriptLoadingComplete(moduleList, finishPluginLoading);\n        }\n    }\n\n    for (var i = 0; i < moduleList.length; i++) {\n        injectIfNecessary(moduleList[i].id, path + moduleList[i].file, scriptLoadedCallback);\n    }\n}\n\nfunction findCordovaPath() {\n    var path = null;\n    var scripts = document.getElementsByTagName('script');\n    var term = '/cordova.js';\n    for (var n = scripts.length-1; n>-1; n--) {\n        var src = scripts[n].src.replace(/\\?.*$/, ''); // Strip any query param (CB-6007).\n        if (src.indexOf(term) == (src.length - term.length)) {\n            path = src.substring(0, src.length - term.length) + '/';\n            break;\n        }\n    }\n    return path;\n}\n\n// Tries to load all plugins' js-modules.\n// This is an async process, but onDeviceReady is blocked on onPluginsReady.\n// onPluginsReady is fired when there are no plugins to load, or they are all done.\nexports.load = function(callback) {\n    var pathPrefix = findCordovaPath();\n    if (pathPrefix === null) {\n        console.log('Could not find cordova.js script tag. Plugin loading may fail.');\n        pathPrefix = '';\n    }\n    injectIfNecessary('cordova/plugin_list', pathPrefix + 'cordova_plugins.js', function() {\n        var moduleList = require(\"cordova/plugin_list\");\n        handlePluginsObject(pathPrefix, moduleList, callback);\n    }, callback);\n};\n\n\n});\n\n// file: src/common/urlutil.js\ndefine(\"cordova/urlutil\", function(require, exports, module) {\n\n\n/**\n * For already absolute URLs, returns what is passed in.\n * For relative URLs, converts them to absolute ones.\n */\nexports.makeAbsolute = function makeAbsolute(url) {\n    var anchorEl = document.createElement('a');\n    anchorEl.href = url;\n    return anchorEl.href;\n};\n\n\n});\n\n// file: src/common/utils.js\ndefine(\"cordova/utils\", function(require, exports, module) {\n\nvar utils = exports;\n\n/**\n * Defines a property getter / setter for obj[key].\n */\nutils.defineGetterSetter = function(obj, key, getFunc, opt_setFunc) {\n    if (Object.defineProperty) {\n        var desc = {\n            get: getFunc,\n            configurable: true\n        };\n        if (opt_setFunc) {\n            desc.set = opt_setFunc;\n        }\n        Object.defineProperty(obj, key, desc);\n    } else {\n        obj.__defineGetter__(key, getFunc);\n        if (opt_setFunc) {\n            obj.__defineSetter__(key, opt_setFunc);\n        }\n    }\n};\n\n/**\n * Defines a property getter for obj[key].\n */\nutils.defineGetter = utils.defineGetterSetter;\n\nutils.arrayIndexOf = function(a, item) {\n    if (a.indexOf) {\n        return a.indexOf(item);\n    }\n    var len = a.length;\n    for (var i = 0; i < len; ++i) {\n        if (a[i] == item) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/**\n * Returns whether the item was found in the array.\n */\nutils.arrayRemove = function(a, item) {\n    var index = utils.arrayIndexOf(a, item);\n    if (index != -1) {\n        a.splice(index, 1);\n    }\n    return index != -1;\n};\n\nutils.typeName = function(val) {\n    return Object.prototype.toString.call(val).slice(8, -1);\n};\n\n/**\n * Returns an indication of whether the argument is an array or not\n */\nutils.isArray = Array.isArray ||\n                function(a) {return utils.typeName(a) == 'Array';};\n\n/**\n * Returns an indication of whether the argument is a Date or not\n */\nutils.isDate = function(d) {\n    return (d instanceof Date);\n};\n\n/**\n * Does a deep clone of the object.\n */\nutils.clone = function(obj) {\n    if(!obj || typeof obj == 'function' || utils.isDate(obj) || typeof obj != 'object') {\n        return obj;\n    }\n\n    var retVal, i;\n\n    if(utils.isArray(obj)){\n        retVal = [];\n        for(i = 0; i < obj.length; ++i){\n            retVal.push(utils.clone(obj[i]));\n        }\n        return retVal;\n    }\n\n    retVal = {};\n    for(i in obj){\n        if(!(i in retVal) || retVal[i] != obj[i]) {\n            retVal[i] = utils.clone(obj[i]);\n        }\n    }\n    return retVal;\n};\n\n/**\n * Returns a wrapped version of the function\n */\nutils.close = function(context, func, params) {\n    return function() {\n        var args = params || arguments;\n        return func.apply(context, args);\n    };\n};\n\n//------------------------------------------------------------------------------\nfunction UUIDcreatePart(length) {\n    var uuidpart = \"\";\n    for (var i=0; i<length; i++) {\n        var uuidchar = parseInt((Math.random() * 256), 10).toString(16);\n        if (uuidchar.length == 1) {\n            uuidchar = \"0\" + uuidchar;\n        }\n        uuidpart += uuidchar;\n    }\n    return uuidpart;\n}\n\n/**\n * Create a UUID\n */\nutils.createUUID = function() {\n    return UUIDcreatePart(4) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(2) + '-' +\n        UUIDcreatePart(6);\n};\n\n\n/**\n * Extends a child object from a parent object using classical inheritance\n * pattern.\n */\nutils.extend = (function() {\n    // proxy used to establish prototype chain\n    var F = function() {};\n    // extend Child from Parent\n    return function(Child, Parent) {\n\n        F.prototype = Parent.prototype;\n        Child.prototype = new F();\n        Child.__super__ = Parent.prototype;\n        Child.prototype.constructor = Child;\n    };\n}());\n\n/**\n * Alerts a message in any available way: alert or console.log.\n */\nutils.alert = function(msg) {\n    if (window.alert) {\n        window.alert(msg);\n    } else if (console && console.log) {\n        console.log(msg);\n    }\n};\n\n\n\n\n\n});\n\nwindow.cordova = require('cordova');\n// file: src/scripts/bootstrap.js\n\nrequire('cordova/init');\n\n})();",
		"com/sapui5tutors/controller/WebIDE_Tutorials/MockIDEDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.MockIDEDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuWebButton4\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDEMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/SettingDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.SettingDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuWebButton5\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDEMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/WebIDEMaster.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller,History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.WebIDEMaster\", {\n             onInit: function(){\n             \t\n             \tvar basicList = this.getView().byId(\"WebIDEList\");\n             \tvar path=\"WebIDE>\";\n             \tbasicList.bindItems({\n             \t\tpath:path+\"/WebIDE\",\n             \t\ttemplate: new sap.m.ObjectListItem({\n             \t\t\ttitle:\"{WebIDE>Title}\",\n             \t\t\ttype:\"Active\",\n             \t\t\tpress: function(oEvent){\n             \t\t\t\tvar item = oEvent.oSource.oBindingContexts.WebIDE.sPath;\n             \t\t\t\tvar sel = item.split('/')[2];\n             \t\t\t\tif(sel==0)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"IntroDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==1)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"SettingDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==2)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"ConfigureDetail\");\n             \t\t\t\t\t}\n             \t\t\t\tif(sel==3)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"HelloIDEDetail\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==4)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"MockIDEDetail\");\n             \t\t\t\t}\n         //    \t\t\t\tif(sel==5)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"VizFrame\");\n         //    \t\t\t\t}\n         //    \t\t\t\tif(sel==6)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"ComponentDetail\");\n         //    \t\t\t\t}\n             \t\t\t}\n             \t\t})\n             \t});\n             \n             },\n   //                       onNavBack: function(){\n   ////          \tvar oHistory, sPreviousHash;\n\t\t\t// // oHistory = History.getInstance();\n\t\t\t// // sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// // if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// // } else {\n\t\t\t// // \tthis.getRouter().navTo(\"Dashboard\", {}, true /*no history*/);\n\t\t\t// // }\n   //          }\n   onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/IntroDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.IntroDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuWebButton3\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDEMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/ConfigureDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.ConfigureDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuWebButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDEMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/WebIDE_Tutorials/HelloIDEDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.WebIDE_Tutorials.HelloIDEDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuWebButton2\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"WebIDEMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/MapDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.MapDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton3\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/AdvancedMaster.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller,History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.AdvancedMaster\", {\n             onInit: function(){\n             \t\n             \tvar basicList = this.getView().byId(\"basiclist2\");\n             \tvar path=\"Advanced>\";\n             \tbasicList.bindItems({\n             \t\tpath:path+\"/Advanced\",\n             \t\ttemplate: new sap.m.ObjectListItem({\n             \t\t\ttitle:\"{Advanced>Title}\",\n             \t\t\ttype:\"Active\",\n             \t\t\tpress: function(oEvent){\n             \t\t\t\t\n             \t\t\t\tvar item = oEvent.oSource.oBindingContexts.Advanced.sPath;\n             \t\t\t\tvar sel = item.split('/')[2];\n             \t\t\t\tif(sel==0)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"CustomDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==1)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"MockServer\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==2)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"GoogleMaps\");\n             \t\t\t\t\t}\n             \t\t\t\tif(sel==3)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"ResponsiveTable\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==4)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"VizCharts\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==5)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"VizFrame\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==6)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"ComponentDetail\");\n             \t\t\t\t}\n             \t\t\t}\n             \t\t\t\n             \t\t})\n             \t});\n             \n             },\n   //                       onNavBack: function(){\n   ////          \tvar oHistory, sPreviousHash;\n\t\t\t// // oHistory = History.getInstance();\n\t\t\t// // sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// // if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// // } else {\n\t\t\t// // \tthis.getRouter().navTo(\"Dashboard\", {}, true /*no history*/);\n\t\t\t// // }\n   //          }\n   onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n            \n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/VizFrameDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.VizFrameDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton7\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/MockDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.MockDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton4\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/VizChartsDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.VizChartsDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton6\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/CustomDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.CustomDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton2\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Advanced_Tutorials/ResponsiveDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Advanced_Tutorials.ResponsiveDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuAdvButton5\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"AdvancedMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/BindDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.BindDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/NestedDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.NestedDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton6\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/CssDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.CssDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton2\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             },\n    //          onRead: function(oEvt){\n             \t\n             \t\n             \t\n             \t\n    //          \t// var oList = sap.ui.getCore().byId(\"__xmlview3--basiclist1\");\n    //          \t// var oitem1 = oList.getItems()[0];\n    //          \t// var oImage = sap.ui.getCore().byId(\"__item0-__xmlview3--basiclist1-0-img\");\n    //          \tvar oList = this.getView().getParent().getParent().getMasterPages()[0].byId(\"basiclist1\");\n    //          \tvar oImage = oList.mAggregations.items[0]._oImageControl;\n             \t\n    //          \t// var loPage = sap.ui.getCore().byId(\"__xmlview1--dashboard\").getContent();\n    //          \tvar loPage = this.getView().getParent().getParent().getParent().getParent().mAggregations.pages[0].getContent()[0].getPages()[0].getContent();\n\t\t\t\n\t\t\t\t// var loTile = loPage[0].getTiles()[1];\n\t\t\t\t// var oItems = loTile.getContent().getItems()[3];\n\t\t\t\t// oItems.bindElement(\"mylocaldata>/Collection\");\n\t\t\t\t// var oPercentValue = oItems.getPercentValue();\n\t\t\t\t// var oDisplayValue = oItems.getDisplayValue();\n\n    //          \tif(oEvt.getSource().getText()===\"Mark as Read\")\n    //          \t{\n    //          \toEvt.getSource().setType(\"Emphasized\");\n    //          \toEvt.getSource().setText(\"Mark as Unread\");\n    //          \toImage.setColor(\"green\");\n    // //          \toItems.setPercentValue(oPercentValue+18);\n\t\t\t\t// // oItems.setDisplayValue(oPercentValue+18);\n    //          \t}\n    //          \telse{\n    //          \toEvt.getSource().setType(\"Default\");\n    //          \toEvt.getSource().setText(\"Mark as Read\");\n    //          \toImage.setColor(\"grey\");\n    //          \toItems.setPercentValue(oPercentValue-18);\n\t\t\t\t// oItems.setDisplayValue(oPercentValue-18);\n    //          \t}\n    //          }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/IntermediateMaster.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller,History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.IntermediateMaster\", {\n             onInit: function(){\n             \tvar basicList = this.getView().byId(\"basiclist1\");\n             \tvar path=\"Intermediate>\";\n             \tbasicList.bindItems({\n             \t\tpath:path+\"/Intermediate\",\n             \t\ttemplate: new sap.m.ObjectListItem({\n             \t\t\ttitle:\"{Intermediate>Title}\",\n             \t\t\ttype:\"Active\",\n             \t\t\t// icon:\"sap-icon://sys-enter\",\n             \t\t\t// firstStatus:[new sap.m.ObjectStatus({\n             \t\t\t// \ticon:\"sap-icon://edit\"\n             \t\t\t// })],\n             \t\t\tpress: function(oEvent){\n             \t\t\t\tvar item = oEvent.oSource.oBindingContexts.Intermediate.sPath;\n             \t\t\t\tvar sel = item.split('/')[2];\n             \t\t\t\tif(sel==0)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"CssDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==1)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"BindDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==2)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"FragmentDetail\");\n             \t\t\t\t\t}\n             \t\t\t\tif(sel==3)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"NestedDetail\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==4)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"FormatterDetail\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==5)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"ExpressionDetail\");\n             \t\t\t\t}\n             \t\t\t}\n             \t\t})\n             \t});\n             },\n   //          onNavBack: function(){\n   //          \tvar oHistory, sPreviousHash;\n\t\t\t// oHistory = History.getInstance();\n\t\t\t// sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// } else {\n\t\t\t// \tthis.getRouter().navTo(\"Dashboard\", {}, true /*no history*/);\n\t\t\t// }\n   //          }\n   onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/ExpressionsDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.ExpressionsDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton3\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/FragmentDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.FragmentDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton5\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Intermediate_tutorials/FormatterDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Intermediate_tutorials.FormatterDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuIntButton4\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"IntermediateMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Routing_Tutorials/FullToSplit.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Routing_Tutorials.FullToSplit\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuRouButton2\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"RoutingMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Routing_Tutorials/SplitDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Routing_Tutorials.SplitDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuRouButton3\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n           onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"RoutingMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Routing_Tutorials/RoutingMaster.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller,History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Routing_Tutorials.RoutingMaster\", {\n             onInit: function(){\n             \t\n             \tvar basicList = this.getView().byId(\"RoutingList\");\n             \tvar path=\"Routing>\";\n             \tbasicList.bindItems({\n             \t\tpath:path+\"/Routing\",\n             \t\ttemplate: new sap.m.ObjectListItem({\n             \t\t\ttitle:\"{Routing>Title}\",\n             \t\t\ttype:\"Active\",\n             \t\t\tpress: function(oEvent){\n             \t\t\t\tvar item = oEvent.oSource.oBindingContexts.Routing.sPath;\n             \t\t\t\tvar sel = item.split('/')[2];\n             \t\t\t\tif(sel==0)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"FullDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==1)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"SplitDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==2)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"FullToSplit\");\n             \t\t\t\t\t}\n         //    \t\t\t\tif(sel==3)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"ResponsiveTable\");\n         //    \t\t\t\t}\n         //    \t\t\t\tif(sel==4)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"VizCharts\");\n         //    \t\t\t\t}\n         //    \t\t\t\tif(sel==5)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"VizFrame\");\n         //    \t\t\t\t}\n         //    \t\t\t\tif(sel==6)\n         //    \t\t\t\t{\n         //    \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\t// loRouter.navTo(\"ComponentDetail\");\n         //    \t\t\t\t}\n             \t\t\t}\n             \t\t})\n             \t});\n             \n             },\n   //                       onNavBack: function(){\n   ////          \tvar oHistory, sPreviousHash;\n\t\t\t// // oHistory = History.getInstance();\n\t\t\t// // sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// // if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// // } else {\n\t\t\t// // \tthis.getRouter().navTo(\"Dashboard\", {}, true /*no history*/);\n\t\t\t// // }\n   //          }\n   onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/StructuringDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.StructuringDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton6\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Routing_Tutorials/FullDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Routing_Tutorials.FullDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuRouButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n            onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"RoutingMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/SplitDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.SplitDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton5\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/GlobalizationDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.GlobalizationDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton2\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/MarginsDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.MarginsDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton4\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/TutorialsMaster.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller,History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.TutorialsMaster\", {\n             onInit: function(){\n             \tvar basicList = this.getView().byId(\"basiclist\");\n             \tvar path=\"basic>\";\n             \tbasicList.bindItems({\n             \t\tpath:path+\"/Basic\",\n             \t\ttemplate: new sap.m.ObjectListItem({\n             \t\t\ttitle:\"{basic>Title}\",\n             \t\t\ttype:\"Active\",\n             \t\t\tpress: function(oEvent){\n             \t\t\t\tvar item = oEvent.oSource.oBindingContexts.basic.sPath;\n             \t\t\t\tvar sel = item.split('/')[2];\n             \t\t\t\tif(sel==0)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"TutorialsDetail\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==1)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"HelloWorld\");\n             \t\t\t\t\t}\n             \t\t\t\t\tif(sel==2)\n             \t\t\t\t{\n             \t\t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"SplitApp\");\n             \t\t\t\t\t}\n             \t\t\t\tif(sel==3)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"StructuringDetail\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==4)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"Globalization\");\n             \t\t\t\t}\n             \t\t\t\tif(sel==5)\n             \t\t\t\t{\n             \t\t\t\t\tvar loRouter = sap.ui.core.routing.Router.getRouter(\"appRouter\");\n\t\t\t\t\t\t\t\t\tloRouter.navTo(\"Margins\");\n             \t\t\t\t}\n             \t\t\t}\n             \t\t})\n             \t});\n             },\n   //          onNavBack: function(){\n   //          \tvar oHistory, sPreviousHash;\n\t\t\t// oHistory = History.getInstance();\n\t\t\t// sPreviousHash = oHistory.getPreviousHash();\n\t\t\t// if (sPreviousHash !== undefined) {\n\t\t\t// \twindow.history.go(-1);\n\t\t\t// } else {\n\t\t\t// \tthis.getRouter().navTo(\"appHome\", {}, true /*no history*/);\n\t\t\t// }\n   //          }\n   onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"Dashboard\");\n             },\n             click: function(){\n             \t// <core:Fragment fragmentName=\"sap.myApp.view.NewFragment\" type=\"XML\"/>\n             \tthis._Dialog = sap.ui.xmlfragment(\"com.sapui5tutors.view.Dialog\",\n\t\tthis);\n\tthis._Dialog.open();\n             \t\n             },\n             onClose : function() {\n\tthis._Dialog.close();\n\tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    },\n    onSubmit: function(oEvent){\n    \tvar loReciever = \"sapui5tutors@gmail.com\";\n    \tvar loSubject = sap.ui.getCore().byId(\"subject\").getValue();\n    \tvar loContent = sap.ui.getCore().byId(\"textarea\").getValue();\n    \tsap.m.URLHelper.triggerEmail(loReciever, loSubject, loContent);\n    \tthis._Dialog.close();\n    \tsap.ui.getCore().byId(\"subject\").destroy();\n    \tsap.ui.getCore().byId(\"textarea\").destroy();\n    }\n\t});\n\n});",
		"com/sapui5tutors/controller/Basic_Tutorials/HelloDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.HelloDetail\", {\n\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton3\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n             onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/js/script.js": "function adSetter() {\r\n\tvar admobid = {};\r\n\t// select the right Ad Id according to platform\r\n\tif (/(android)/i.test(navigator.userAgent)) {\r\n\t\tadmobid = { // for Android\r\n\t\t\tbanner: 'ca-app-pub-2377379935274230/5282510107',\r\n\t\t\tinterstitial: 'ca-app-pub-2377379935274230/5003308503'\r\n\t\t};\r\n\t}\r\n\r\n\tif (AdMob) {\r\n\t\tAdMob.createBanner({ //Remove this Before publishing your app\r\n\t\t\tadId: admobid.banner,\r\n\t\t\tposition: AdMob.AD_POSITION.BOTTOM_CENTER,\r\n\t\t\tautoShow: true\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\r\nfunction onDeviceReady() {\r\n\tadSetter();\r\n}\r\n\r\nfunction domLoaded() {\r\n\tdocument.addEventListener(\"deviceready\", onDeviceReady, false);\r\n}",
		"com/sapui5tutors/controller/Basic_Tutorials/TutorialsDetail.controller.js": "sap.ui.define([\n\t\"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"com.sapui5tutors.controller.Basic_Tutorials.TutorialsDetail\", {\n\t\t\t\tonInit: function(){\n\t\t\t\t\tif(sap.ui.Device.system.tablet)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar menubutton1 = this.getView().byId(\"menuButton1\");\n\t\t\t\t\t\tmenubutton1.setVisible(false);\n\t\t\t\t\t}\n\t\t\t\t},\n                onNavBack: function(){\n\t\t\tvar loRouter = sap.ui.core.UIComponent.getRouterFor(this);\n\t\t\tloRouter.navTo(\"TutorialsMaster\");\n             }\n\t});\n\n});",
		"com/sapui5tutors/view/Blog_Tutorials/BlogTutorial.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Blog_Tutorials.BlogTutorial\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Blogs on SAPUI5\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuBloButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t\n\t\t\t\t<content>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Responsive Table in SAPUI5\" href=\"http://www.sapui5tutors.com/2016/08/responsive-sapui5-table.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this particular post, I will discuss about responsive web design in sapui5 and why responsiveness is important and how to implement responsiveness in sapui5 applications.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Margins and Padding in SAPUI5\" href=\"http://www.sapui5tutors.com/2016/08/margins-and-padding-in-sapui5.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial blog you learn about Margins and paddings in SAPUI5 applications. SAP has provided some predefined classes that you can make use in the application for margin and padding purposes of your control elements.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"SAPUI5 Interview Questions\" href=\"http://www.sapui5tutors.com/p/interview-question.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" SAPUI5 Interview Questions A\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" SAPUI5 Interview Questions B\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" SAPUI5 Interview Questions C\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" SAPUI5 Interview Questions D\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Formatters and Inline Expressions\" href=\"http://www.sapui5tutors.com/2016/07/formatters-and-inline-expressions.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I have explained things about custom formatters and Inline expressions. How formatters help in a particular sapui5 application. I have covered almost everything related to both formatters and inline expressions with the help of examples.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Setting up SAP Web IDE in SAP HANA Cloud\" href=\"http://www.sapui5tutors.com/2016/06/setting-up-sap-web-ide.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi, in this tutorial we will look forward to setting up SAP Web IDE. In my previous blog I have discussed about SAP Web IDE, have a look at the Introduction of SAP Web IDE . Now that you are familiar with this IDE, now I will discuss the steps to set up SAP Web IDE in the hana cloud cockpit.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Configuring Northwind oData Destination in SAP Web IDE\" href=\"http://www.sapui5tutors.com/2016/06/configuring-destinations-in-sap-web-ide.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will help you to configure destinations in Sap Web IDE. In normal scenario, we require a odata service which we have to integrate with the frontend, to display the data on the UI. Similarly, here we will use northwind service as an example for setting the destination in Sap Web IDE.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Mock Data In SAP Web IDE\" href=\"http://www.sapui5tutors.com/2016/06/mock-data-in-sap-web-ide.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will explain how to run sap ui5 application with mock data in SAP Web IDE. This tutorial would be helpful for those who don’t have a backend connectivity with the server or don’t have  a network connectivity. \"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Mock Server In SAPUI5 Application\" href=\"http://www.sapui5tutors.com/2016/06/mockserver-in-sapui5.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will explain how to run SAPUI5 applications through mockserver with the dummy data, i.e mock Data\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Hello World Application in SAP Web IDE\" href=\"http://www.sapui5tutors.com/2016/05/hello-world-in-sap-web-ide.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will explain how to create your first application in SAP web IDE from scratch. We will try to create a hello world application, since this is the ideal application for starters.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"SAP Web IDE\" href=\"http://www.sapui5tutors.com/2016/05/sap-web-ide.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE (Integrated Development Environment) is a web-based tool that empowers users to rapidly create and extend applications for browser and mobile devices. It simplifies the end-to-end application lifecycle: prototyping, development, packaging, deployment, and customer extensions for SAP Fiori and SAPUI5 applications.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Integrate Google Maps with SAPUI5 Application\" href=\"http://www.sapui5tutors.com/2016/05/integrate-google-maps-with-sapui5.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi readers!! I was just trying out integrating google maps in ui5 application, so here I am with another tutorial blog. In this blog, I will show you how to create Google developer API key and then how to use it in sap ui5 application to integrate google maps\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"\" href=\"\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this blog, I will be taking about what is a Custom control in sapui5, how to develop it and how to use it once its implemented.  The idea is simple, we will create a simple custom control apart from what already exists in sapui5 framework.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Speech Recognition Custom Control \" href=\"http://www.sapui5tutors.com/2016/04/speech-recognition-custom-control.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"CSS in SAP UI5 Application\" href=\"http://www.sapui5tutors.com/2016/04/css-in-sapui5-application.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this blog, I will try to explain how CSS works in SAPUI5 application. As you must know, CSS is used for presentation purposes, i.e  how the elements should be rendered on the screen. Using CSS, one can control the color of Text, the style of fonts, spacing, background images, and on and on.\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Charts Using VizFrame Control\" href=\"http://www.sapui5tutors.com/2016/04/sapui5-vizframe.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi, in this tutorial, we will learn how to design viz frame charts. Unlike Viz charts, Vizframe charts are a bit different. SAP no longer supports Viz charts, it emphasize developers to use VizFrame, since viz charts are now depreciated since 1.32.0, are no longer actively developed and won’t be getting any new features.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Charts Using Viz Control\" href=\"http://www.sapui5tutors.com/2016/04/sapui5-viz-charts.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi, in this tutorial, we will learn how to design charts. SAP provide different controls for charts, like makit, viz charts, VizFrame. Viz Charts are simple to create and to understand. However,  SAP no longer supports Viz charts, it emphasize developers to use VizFrame, viz charts are now depreciated since 1.32.0, are no longer actively developed and won’t be getting any new features. Still for newbies, viz charts might provide a better understanding about the charts.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Using Fragments in SAP UI5 Application\" href=\"http://www.sapui5tutors.com/2016/03/fragments.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Fragments are reusable UI parts like views and can be used in any other app if they fit in. Fragments should only contain UI elements. It does not have controllers like views. Event handling methods for UI elements which are defined in Fragment can be implemented in the respective view controllers in which they are used.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Project Structuring in SAP UI5 Application\" href=\"http://www.sapui5tutors.com/2016/03/sapui5-application-project-structuring.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"With the release of latest update of SAPUI5, project structure has been changed slightly. All the configuration that used to be maintained in the configuration file is now managed by manifest.json , moreover it takes care of routing, which previously was maintained by component.js. Similarly, there have been many more changes\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Globalization(i18n)\" href=\"http://www.sapui5tutors.com/2016/03/internationalization-resourcebundle.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We use internationalization and localization in our Sapui5 application for replacing the hard coded text from the application. It is one of the best practices of SAP to use i18n for hard coded texts. It is a way, how a computer software could be adapted to different languages\"/>\n\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Component Preload in SAP UI5 Application\" href=\"http://www.sapui5tutors.com/2016/03/how-to-remove-component-preloadjs-error_3.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" In order to improve loading performance, we need to package the Javascript files in a way that allows us to only send one file to the browser that contains all of the code. SAP packages their UI5 libraries into single files called 'preloads'. This same method can be used for the application code of UI5 apps. In order to make the packaging step as quick as possible we will use a Javascript task runner\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Building CRUD application using ODATA\" href=\"http://www.sapui5tutors.com/2016/02/how-to-build-application-using-create.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This blog explains how to create a CRUD application using SAPUI5 Using Odata Model.\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Data Binding in SAPUI5 application\" href=\"http://www.sapui5tutors.com/2016/01/data-binding.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The process for using data binding for SAPUI5 controls in a simple application comprises five steps: Deciding on the model, creating a model and a control instance, binding the properties or lists to the model and, if required, unbinding the properties again.\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Routing in Full Screen Application\" href=\"http://www.sapui5tutors.com/2016/01/routing-in-full-screen-application.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Navigation is one of the most important functionality in any application and UI5 is not any exception either. One of the way is through routing. In this article, you will learn to implement routing in SAPUI5 application, set custom URLs for views or pages, and understand the recommended way of navigation in SAPUI5.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Routing in Split Screen Application\" href=\"http://www.sapui5tutors.com/2016/01/routing-in-split-application.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this article, you will learn to implement routing in Split screen  application, set custom URLs for views or pages, and understand the recommended way of navigation in SAPUI5.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Navigation and Routing in a glance\" href=\"http://www.sapui5tutors.com/2016/01/routing-in-application.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this blog, you will learn the basics of routing.  How navigation works? Moreover, the basic terminologies in routing.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Routing from Full screen to split screen\" href=\"http://www.sapui5tutors.com/2016/01/routing-from-full-to-split-screen.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this article, you will learn to implement routing from full screen to Split screen  application, set custom URLs for views or pages, and understand the recommended way of navigation in SAPUI5\"/>\n\t\t\t\t\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"SAP UI5 Most Common Examples\" href=\"http://www.sapui5tutors.com/2016/01/sap-ui5-most-common-and-basic-examples.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here is a collection of examples of the most commonly used sap ui5 controls.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Installation\" href=\"http://www.sapui5tutors.com/2016/01/installation.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here are some basic steps to install eclipse in your system, these steps will guide you to install and set up environment for Eclipse and SAPUI5 plugins.  Download Eclipse luna or juno.\"/>\n\t\t\t\t<Link class=\"sapUiSmallMargin\" text=\"Split App\" href=\"http://www.sapui5tutors.com/2016/01/split-app.html\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I will show you how to create a simple split app. Split app basically is a an app divided into two segments (pages), one is the Master Page and the other is the Detail Page\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Dashboard.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.Dashboard\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page  id=\"dashboard\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"SAPUI5 Tutorials\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t<!--\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Basic Tutorials\"-->\n\t<!--\t  press=\"onBasTutorialpress\" subheader=\"Topics Covered:6\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Basic.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Intermediate Tutorials\"-->\n\t<!--\t  press=\"onIntTutorialpress\" subheader=\"Topics Covered:6\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Intemediate.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Advanced Tutorials\"-->\n\t<!--\t  press=\"onAdvTutorialpress\" subheader=\"Topics Covered:7\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Advanced.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Routing\"-->\n\t<!--\t  press=\"onRoutPress\" subheader=\"Topics Covered:3\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/routing.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"SAP WebIDE\"-->\n\t<!--\t  press=\"onIDEpress\" subheader=\"Topics Covered:5\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/WebIDE.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"SAPUI5 Blogs\"-->\n\t<!--\t press=\"onBlogpress\" subheader=\"Blog Count: 30+\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Blog.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--\t\t\t\t<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Video Tutorials\"-->\n\t<!--\t  press=\"onVideopress\" subheader=\"Videos : 20+\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Videos.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t<!--<GenericTile class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom tileLayout genericTileImage\" header=\"Interview Questions\"-->\n\t<!--\t  press=\"onInterviewpress\" subheader=\" Question: 100+\" >-->\n\t<!--\t<tileContent>-->\n\t<!--\t\t<TileContent  unit=\"\" footer=\"\" >-->\n\t<!--\t\t\t<content>-->\n\t<!--\t\t\t\t<Image src=\"css/Image/Interview.png\"/>-->\n\t<!--\t\t\t</content>-->\n\t<!--\t\t</TileContent>-->\n\t<!--\t</tileContent>-->\n\t<!--</GenericTile>-->\n\t\n\t\n\t\n\t\n\n\t<TileContainer>\n\t\t\n\t\t\t<CustomTile press=\"onBasTutorialpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Basic\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Topics covered : 6\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Basic.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t<!--<ProgressIndicator class=\"sapUiSmallMarginBegin  sapUiSmallMarginEnd sapUiSmallMarginBottom\" percentValue=\"\" displayValue=\"0%\" showValue=\"true\" height=\"20px\" width=\"70%\" state=\"None\" />-->\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onIntTutorialpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Intermediate\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Topics covered : 6\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Intemediate.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t<!--<ProgressIndicator id=\"avbx\" class=\"sapUiSmallMarginBegin  sapUiSmallMarginEnd sapUiSmallMarginBottom\" percentValue=\"{mylocaldata>/Collection/percentValue}\" displayValue=\"0%\" showValue=\"true\" height=\"20px\" width=\"70%\" state=\"None\" />-->\n\t\t\t\t\t\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onAdvTutorialpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Advanced \" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Topics covered : 7\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Advanced.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t<!--<ProgressIndicator class=\"sapUiSmallMarginBegin  sapUiSmallMarginEnd sapUiSmallMarginBottom\" percentValue=\"\" displayValue=\"0%\" showValue=\"true\" height=\"20px\" width=\"70%\" state=\"None\" />-->\n\t\t\t\t\t\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onRoutPress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Routing\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Topics covered : 3\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/routing.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onIDEpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"SAP WebIDE\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Topics covered : 5\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/WebIDE.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onBlogpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"SAPUI5 Blogs\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Blog Count : 30+\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Blog.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onVideopress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Video Tutorials\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t\n\t\t\t\t\t<Text text=\"Videos covered : 20+\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Videos.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t<CustomTile press=\"onInterviewpress\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom genericTileImage\">\n\t\t\t\t<content>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<Text text=\"Interview Questions\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t<Text text=\"Questions : 100+\" class=\"sapUiSmallMarginBegin sapUiSmallMarginBottom Tileinfotext\"></Text>\n\t\t\t\t\t<Image src=\"css/Image/Interview.png\" width=\"60px\" height=\"60px\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom \"/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</content>\n\t\t\t\t</CustomTile>\n\t\t\t\t\n\t\t\t\t<!--<StandardTile-->\n\t\t\t\t<!--icon=\"css/Image/Intemediate.png\"-->\n\t\t\t\t<!--title=\"Intermediate Tutorials\"-->\n\t\t\t\t<!--info=\"Topics Covered:6\"-->\n\t\t\t\t<!--press=\"onIntTutorialpress\"-->\n\t\t\t\t<!--/>-->\n\t\t\t\t\n\t\t</TileContainer>\n\t\t\t\t</content>\n\t\t\t\t\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/MarginsDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.MarginsDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Margins and Padding\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Margins and Padding\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuButton4\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial blog you learn about Margins and paddings in SAPUI5 applications. SAP has provided some predefined classes that you can make use in the application for margin and padding purposes of your control elements.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Margins and Padding are used for tuning the layout of the sapui5 screens. We can customize the margins of particular controls manually, by adding custom CSS. But we can also take use of predefined SAP provided CSS classes and this is suggested by SAP since these classes take care of consistent sizing steps, left to right support, and responsiveness.)\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Using these predefined classes; sapui5 provides the option of adding spaces in between the controls by adding a margin. And these margins clear an area around its respective control, outside of its border.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Margins are transparent and are not the part of control’s clickable area, and they collapse with adjacent margins. There are 4 standard sizes available, and they are tiny(8px), small(16px), medium(32px) and large(48px). \"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"And there are 4 types of margins available:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Full Margins\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" This is used if you want to clear an area all round your control, and this consists of:\nsapUiTinyMargins\nsapUiSmallMargins\nsapUiMediumMargins\nsapUiLargeMargins\"/>\n\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Single-Sided Margins\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This would only clear only one side of the control plus you will have to define which part of the control has to get the margin, for eg top, bottom, begin, end. These are the classes:)\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic17.PNG\" width=\"100%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Two-Sided Margins\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This would clear spaces on the two sides, either top and bottom or begin or end. And these are the classes provided by sap:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic18.PNG\" width=\"100%\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Responsive Margins\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" If the application is to run on different devices like mobiles, tablets, desktop then one must choose responsive margins, as they automatically align to the screen sizes.  sapUiResponsiveMargin class is for responsiveness .\nWe can also remove margins, with the help of predefined sap class, like for example some of the controls comes with a margin, and then you don’t want to use the margin for a particular reason, then you can remove the margins by the predefined classes. If you don’t want any margin at all, then use  sapUiNoMargin. Otherwise use particular margins, some of them are:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic19.PNG\"  />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this particular scenario, I have a view which consist of a Page, which includes an image, texts, buttons, icontabfilters, input fields. I will implement margin to the sap.m.App and then to the image. This would make you understand the concept of margins and paddings.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"I am sharing the portion of code for the UI and I have highlighted the portion of code where I have used the class.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic20.PNG\" width=\"100%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have used the class in sap.m.App, also I have kept the width = “auto” , since if we run the application on different devices, the margin would be adjusted accordingly. For a tablet the margin width would be less automatically and for a mobile device there won’t be any margin at all so as to save space.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Similarly, I have used class='sapUiSmallMargin' for the image, a small margin would be maintained around the image.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output Before\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic21.PNG\" width=\"100%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output After\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic22.PNG\" width=\"100%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"The difference in the margins is showed through a red line border.\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic23.PNG\" width=\"100%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope, you understood the tutorial blog. Do share the feedback in the comment section and if you have any doubts relating to this, mail me at sapui5tutors@gmail.com. Happy to help\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/HelloDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.HelloDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Hello World\" >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Hello World\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuButton3\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This tutorial will tell you how to implement a very simple SAPUI5 based Hello World example. But instead of simply writing 'Hello World' to the console we will display 'Hello World' in an alert dialog which is displayed each time the user presses a button.\"/>\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here I am writing the code in the HTML, and not following the MVC concepts. MVC  concepts are followed for a bigger project, since this is a simple hello world program, the coding is done only in html file itself.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic24.png\" width=\"70%\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"First line describes HTML5 DOCTYPE. SAPUI5 considers  itself an HTML5 framework.Lline 5 and 6 tells the browser that mimetype is text/html and the content is UTF-8 encoded. With the X-UA-Compatible meta tag we tell IE browsers what version of Internet Explorer the page should be rendered as i.e. IE7 compatibility. IE=edge tells IE 8 should render with the highest IE 8 mode.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" In line 8 we define our SAPUI5 framework , here we get it from the SAP HANA Cloud. When bootstrapping SAPUI5 you can specify the theme and SAPUI5 library.\nThese are 3 most widely used themes:\n·   sap_goldreflection\n·   sap_bluecrystal\n·    sap_hcb\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" The data-sap-ui-libs attribute can be used to load different libraries of SAPUI5\nTwo most common used libraries are:\n·   sap.ui.commons – for desktop platform\n·    Sap.m – for mobile platform\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"If you want you could define your own css classes or you could overwrite SAPUI5 styles.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" At First we have defined variable oBtn then we instatiate a new button and assign it to oBtn. Here we are using “new” for instantiating the variable, new is a standard Javascript keyword and creates a new object.\nHere we are using sap.ui.commons.Button which has a property text. Here sap.ui.commons.Button inherits from sap.ui.core.Control.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, we want the text on the button to be 'Hello World' and the press event listener simply gets the text of the button by calling the getText() method on this to alert the text. Then we  calling oBtn.placeAt('content'); in order to add our button to the right location in our DOM.\nIn line 31, we are defining the HTML body, It comes with the class sapUiBody which will offer some css styling, the role attribute of the body tag is relevant for Accessibility.\"/>\n\t\t\t    <con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic25.png\" width=\"70%\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/SplitDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.SplitDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Split Application\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Split Application\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuButton5\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I will show you how to create a simple split app. Split app basically is a an app divided into two segments (pages), one is the Master Page and the other is the Detail Page. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch my video for better understanding:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/FNrWd8_meEg\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here we will create a New Project \"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic26.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Select Application Project from SAPUI5 Application Development. Now Name the Project ,here I named it as SplitApp.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic27.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Click on Next, but unselect the Initial view.\nNow we will create two more views,  i.e. Master view and page view\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic28.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Name it as MasterPage, similarly create another view and name it as DetailPage.\nNow in the Index.html file, in the style tag, we will start coding.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic29.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here sap.ui.localResources(“”) make the location of a component's resources known to SAPUI5. Here this is empty, since we haven’t  created any  folder within the WebContent.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We have created a variable named app, which is a splitapp, we have mentioned the initial page’s id.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Mpage is a masterPage view, in which the id, viewname and type of the view is mentioned, similarly the detail page is also created.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We have added both Master and Detail Page to the app, which is a splitapp. At the end we have added the app to the content.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now name the tilte in masterPage.view.js as Master Page, similarly replace the title in DetailPage.view.js as Detail Page.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output will be somewhat like this:\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic30.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\nNow we will show some content in the Master and the Detail Page. For that, we will create a list in the master page, and a simple form in the detail page.  Here we will make use of JSON for binding data in the list.\nWe are trying to bind data on the form in the DetailPage on the click of list item in MasterPage. For that, we will write code in the press function of the list. \"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Creating a list\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"MasterPage.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic31.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For binding the json onto the list, we will define json model  in the init method of MasterPage’s controller.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"MasterPage.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic32.PNG\" />\n\t\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Expense.json\" width=\"100%\"/>\n\t\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic33.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"You may use any image for your own purpose.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We will create a simple form,  and as the list item is pressed, the data on the list item should be populated onto the form.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"DetailPage.view.js\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We will create a simple form,  and as the list item is pressed, the data on the list item should be populated onto the form.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic33.PNG\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Final Output\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic35.png\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t\t\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/TutorialsMaster.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.TutorialsMaster\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Topics\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t<content>\n\t\t\t\t<List id=\"basiclist\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/GlobalizationDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.GlobalizationDetail\"\r\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\r\n\t<App>\r\n\t\t<pages>\r\n\t\t\t<Page title=\"Globalization\">\r\n\t\t\t\t<customHeader>\r\n\t\t\t\t\t<Bar class=\"BarColor\">\r\n\t\t\t\t\t\t<contentRight>\r\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</contentRight>\r\n\t\t\t\t\t\t<contentMiddle>\r\n\t\t\t\t\t\t\t<Text text=\"Globalization\"/>\r\n\t\t\t\t\t\t</contentMiddle>\r\n\t\t\t\t\t\t<contentLeft>\r\n\t\t\t\t\t\t\t<Button id=\"menuButton2\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\r\n\t\t\t\t\t\t</contentLeft>\r\n\t\t\t\t\t</Bar>\r\n\t        \r\n\t    </customHeader>\r\n\t\t\t\t<content>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"It is a way how a computer software could be adapted to different languages.Internationalization is actually the process of designing a software so that it can be adapted to different languages across the world.\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Localization is the process of adapting internationalized software for a particular region or language by adding locale specific components and translating text.\r\n\t\t\t\t\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Here's my video in youtube, explaining the concept of Globalization\"/>\r\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video5\"  width=\"90%\" height=\"90%\"\r\n    src=\"https://www.youtube.com/embed/paKQCoe6uhY\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"We use internationalization and localization in our Sapui5 application for replacing the hard coded text from the application. It is one of the best practices of SAP to use i18n for hard coded texts.  Generally we use Resource Model for defining, since it is one way binding \"/>\r\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"(sap.ui.model.resource.ResourceModel)\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"The i18n model is set up in the Component's initialization section, or it could also be defined in the manifest.json file.\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic16.PNG\" width=\"100%\"/>\r\n\t\t\t\t\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Now create a folder named i18n in the project directory and maintain i18n files according to the languages.\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic11.png\" width=\"100%\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"The configuration specifies the relative location of the resource bundle. This is made absolute (in relation to our app's namespace) by use of the jQuery.sap.getModulePath utility function, and then used to create the named model, before it is set on the component.\r\n\r\nNow in the i18n.properties file, enter all the hard coded text that has been used in the application. And bind the data using the i18n model\"/>\r\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic15.PNG\" width=\"100%\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Here we have used a table and, the column text name is a hard coded value, hence we are using i18n model for the same.  Now we have to maintain the same fields in the i18n.properties file.\r\n\r\ns3OrderColumnSales=Sales Order\r\n\r\ns3OrderColumnDelivery=Delivery Status\r\n\r\ns3OrderColumnOrder=Order Date\r\n\r\ns3OrderColumnRequested=Requested Date\r\n\r\ns3OderColumnAmount=Order Amount\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic12.png\" width=\"100%\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Hence this is done, now to serve the real purpose of i18n file, another file will be created in the i18n folder for the german language. Name it as i18n_DE.properties\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic13.png\" width=\"100%\" />\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Now, maintain the same field names in this particular file.\r\n\r\ns3OrderColumnSales=Kundenauftrag\r\n\r\ns3OrderColumnDelivery=Lieferstatus\r\n\r\ns3OrderColumnOrder=Auftragsdatum\r\n\r\ns3OrderColumnRequested=Wunschtermin\r\n\r\ns3OderColumnAmount=Bestellbetrag\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Now to see the output, in german language, just add DE instead of EN in the application url. Add ?sap-ui-language=DE after the url.)\"/>\r\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\r\n\t\t\t\thtmlText=\"Suppose the default url is http://localhost:42067/demo_i18n/index.html just add ?sap-ui-language=DE. Now the url would be  http://localhost:42067/demo_i18n/index.html?sap-ui-language=DE\"/>\r\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output\" width=\"100%\"/>\r\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic14.png\" width=\"100%\"/>\r\n\t\t\t\t</content>\r\n\t\t\t\t<footer>\r\n\t\t<Toolbar/>\r\n\t\t</footer>\r\n\t\t\t</Page>\r\n\t\t</pages>\r\n\t</App>\r\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/Tutorials.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.Tutorials\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"tutorials\">\n\t</SplitApp>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/StructuringDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.StructuringDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page>\n\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Project Structuring in SAPUI5\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuButton6\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"With the release of latest update of SAPUI5, project structure has been changed slightly. All the configuration that used to be maintained in the configuration file is now managed by manifest.json , moreover it takes care of routing, which previously was maintained by component.js. Similarly, there have been many more changes. An example with the latest project structure is shown.\"/>\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic3.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This is a sample project structure, which almost covers every aspect.The WebContent contains all the folders, including Component-preload.js, Component.js, index.html , and manifest.json.  Gulpfile  and node_modules are of no use here, it is mainly used to create the Component-preload.js file.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The First change that you notice is, now the controller files are kept separate in the controller folder, and not in the view folder itself. The controller folder include all the javascript files.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic4.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Then comes the CSS folder, which include customizing the sap ui5 application. Add any css files in this folder.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic5.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Next is the i18n folder, which is used for Globalization purpose. It includes i18n files for particular languages.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic6.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"localService and test folder is used for mockserver, which consists of mockdata , metadata,  mockserver.js and testService.html which acts an index.html file for the mockserver.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic7.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"model folder consists of the formatter.js file.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic8.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"util folder consists the dialog.js file, if it is used in a particular project, and similarly the fragment files are contained in the view folder.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic9.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Next comes the view folder, which now purely consists only the views, both xml or maybe javascript files too. Moreover, it also includes the fragment files too.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic10.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Component-preload.js file is mainly used for optimization purpose, it is created using grunt operations or maybe using gulpfile.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"  Component.js file is used here for declaring the models, (odata, json, or i18n)but in the latest version of sapui5, that step is also done in the manifest.json file.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Moreover, here the router initialization is also done.\n\n·         Index.html file serves the same purpose here, we declare the shell  here. And all the library files are loaded in index.html. Mainly there is no change in the index file. It serves the same purpose similar to what it used to serve in previous versions.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Manifest.json file here is used to declare the OData, here  the version of sap.ui5, sap.ui, sap.app is done. Moreover, the routes are defined here itself, and not in the component.js file.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Go through my video from Youtube, on Project Structuring:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the First session I have covered, views, controllers, Component.js, and Manifest.json\"/>\n\t\t\t\t<html:iframe class=\"labelsize\"   width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/-vhBWvtDjmA\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n    \t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the Second Session, I have covered the models, i.e JSON model\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/eECncPhsPJI\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the third Session, I have covered the Internationalization topic \"/>\n\t\t\t\t<html:iframe class=\"labelsize\"   width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/paKQCoe6uhY\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Basic_Tutorials/TutorialsDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Basic_Tutorials.TutorialsDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Installation of SAPUI5 Plugin\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<VBox>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here are some basic steps to install eclipse in your system, these steps will guide you to install and set up environment for Eclipse and SAPUI5 plugins\" />\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Step 1: Install Java Development(JDK)\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The JDK is the Java package for developers, which includes a complete Java Runtime and tools for developing, debugging  and monitoring java applications. Download latest version from: \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Step 2: Setup Environment Variables\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"After the installation of your JDK, it's important to create a new environment variable called JAVA_HOME. To do this, open your 'Run' window in Windows and type in 'control sysdm.cpl'. On the Advanced tab, click Environment Variables. Then create a new System variable called JAVA_HOME. The value of this should be the path to your JDK.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic1.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Step 3: Install  Eclipse\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Use this (http://www.eclipse.org/downloads/)  site to download latest version of Eclipse IDE for Java EE Developers. Extract the zip-file to a directory of your choice (for example 'C:\\Program Files\\eclipse'). When you start eclipse, you have to choose a workspace.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Step 4: Install SAPUI5 Plugin\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the help menu in Eclipse, click “Install New Software”, paste one the URL according to the version of the Eclipse.\n\n    https://tools.hana.ondemand.com/luna for Eclipse Luna (4.4)\n \"/>\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"https://tools.hana.ondemand.com/kepler for Eclipse Kepler (4.3)\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Basic/pic2.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Select the entry 'UI development toolkit for HTML5' and finish the wizard. Restart eclipse after you complete the installation.\n\nYou could also install tomcat server, but it will also work without it, if you have to run the project on the web browser and if you are connected to ECC.\n\nThat’s it!!\n \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Have a look at the installation of SAPUI5 plugin installation in Eclipse video by sapui5tutors\n \"/>\t\t\t\n \n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/p9-pd7yGAcY\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n \n\t\t\t\t</VBox>\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/IntermediateMaster.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.IntermediateMaster\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Topics\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t<content>\n\t\t\t\t<List id=\"basiclist1\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/CssDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.CssDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"CSS\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"CSS\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton2\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"CSS is used for presentation purposes, i.e  how the elements should be rendered on the screen.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Using CSS, one can control the color of Text, the style of fonts, spacing, background images, and on and on.\nTaking about applying CSS in SAPUI5 application, well it can be done in the following ways:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) External style sheet\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Internal style sheet\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch the video for better understanding:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/_L6kO9dUBWE\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"External Style Sheet\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This is the best way to style elements, here a separate .css file is maintained for style purpose. The entire look an application can be changed, just by changing a single file. Normally it is named  as style.css. We need to provide the path to the .css file, most of the time, it is provide in the index.html file, since the latest release, sap insist on using manifest.json file where the reference to the external .css file can be given. I will show you both the ways.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Reference in the index.html file\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic1.PNG\" width=\"70%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Reference in the manifest.json file\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic2.PNG\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This is how, style.css looks\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic3.PNG\" width=\"70%\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Internal Style Sheet\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Internal Style Sheet is mainly used,  for a particular element. Internal style is defined within the style tag, within the head tag in an html page, i.e in the index.html page.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Suppose, there is  a scenario to style a particular button then this method is best suited.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic4.PNG\" width=\"70%\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"How to use it in view\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Suppose you have to use CSS in text control, refer the code\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 'tag' Text class='dealerButton' text='abc' 'tag' \"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<!--<Toolbar>-->\n\t\t<!--\t<ToolbarSpacer/>-->\n\t\t<!--\t<Button text=\"Mark as Read\" press=\"onRead\"/>-->\n\t\t<!--\t</Toolbar>-->\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/BindDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.BindDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Data Binding\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Data Binding\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The business data within a model can be defined using various formats:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"1) JavaScript Object Notation (JSON)\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"2) Extensible Markup Language (XML)\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"3) OData\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The process for using data binding for SAPUI5 controls in a simple application comprises five steps: Deciding on the model, creating a model and a control instance, binding the properties or lists to the model and, if required, unbinding the properties again.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"JSON Model\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The JSON model supports two-way data binding by default, which means that the model will automatically reflect changes to the view and vice versa.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For JSON Model Binding, take a look at my video from youtube:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/eECncPhsPJI\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n    \n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Defining the Data\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To define the data, proceed as follows:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create the data that you want to bind to a control property. Here we are using JSON Model\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Place the code into your sample json file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic5.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Create Controls and Property Binding\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic9.PNG\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Create Data Binding Model Instance\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now, here I am using a list to show the data, in a list format.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic6.PNG\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Here sap.m.ObjectListItem is a template for the list in which we are binding the data.\nWe also define the path, which is a key value defined in the JSON model.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Binding Modes\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Binding mode is usually contains of 2 main categories: Two Way, One Way and One Time modes. Let’s get some explanations on that:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"One Way - means that all data changes will be reflected on the controls. If you have input field mapped on name field in model all model’s name property value changes will be displayed in that input. Changing the input will not be reflected on the model.\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Two Way - means that all input changes will be reflected in the model. Unfortunately this will not work for data binding made with formatter functions.\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"One Time - means data will be bound from model to view just once\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"By default JSON and XML models have Two Way bind mode, resource and OData models have One Way mode. Right now OData and resource models don’t support Two Way mode.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Binding Types\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"There are 3 types of data binding:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Bind Aggregation\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Property Binding\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Bind Element\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"ODATA Model\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The OData model is a server-side model: the dataset is only available on the server and the client only knows the currently visible rows and fields. Sorting and filtering is done on the server. The client has to send a request to the server to accomplish these tasks.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"And the steps are:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"1) Instantiate the OData model as follows:\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic7.PNG\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic8.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Here, I have used sap.m.SelectDialog whuch is used as a dialog box, in which\nCustomer Names and their informations is displayed in a list.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" At first data is read from the ECC server using ODataModel.read, where\n/AccountListInfoSet is an entity set, and ImUsername is a filter. This data\nis set into a JSON model which is binded into the DealerList,ie. Select Dialog \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope it helped! Thanks!\"/>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/ExpressionsDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.ExpressionsDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Expression Binding\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton3\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Expression binding is an enhancement of the SAPUI5 binding syntax, which allows for providing expressions instead of custom formatter functions.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This saves the overhead of defining a function and is recommended in cases where the formatter function has a trivial implementation like comparison of values\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Expression binding is especially useful in the context of SAPUI5XML templating where XML views with templating are preprocessed so that the SAPUI5 controller is a natural place to put custom formatter functions that are not available.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"There are some predefined status for this, like Success, Error, Critical. Now for an example, I will make use of it.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So here, our use case is to display a success state, if the price of the product is less than 250 else show an error state. So, in our application, we will display it in the numberstate property of the list.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic30.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, this is a ternary expression here that we have used, if the price is greater than 250 then error else success.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic29.png\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch my video on Custom formatter and Inline Expressions\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/RzNdqvUTmc0\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n    \n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"I hope you understood the concept of the formatters and Inline Expressions. For any queries, mail me at sapui5tutors@gmail.com.\"/>\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/NestedDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.NestedDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Nested Views\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Nested Views\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton6\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial we will be focusing on creating nested views, and how nested views are useful in SAPUI5. So as you must know, re usability is one of the main and important features that any framework must include. And as seen in my previous tutorial on Fragments, the concept of re usability was pretty clear.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch the video, for better understanding of both Formatters and Nested Views.\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/7qQjmaqKVqA\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Fragments are not only the container elements that can be used in a view for re usability. We can also nest Views into one another, i.e we could use Nested Views. This pattern is very useful , if you have parts of your UI which you want to reuse in different places of your particular application\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So unlike Fragments, which doesn’t have their own controllers, Nested views have their own controllers just as usual views. Just a single line of code is required to integrate a Nested view into a view.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"\n'tag' mvc:XMLView viewName=”name of you view”/  'tag' \" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So there are basically 3 steps required:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create a View and its controller in the specific folders.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Instantiate  the Nested view in the view, with the above single line of code.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Write the desired code in the newly created Nested View.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Suppose, I have to add a Text in two of my pages. Here these buttons are used twice, hence I will use Nested Views to achieve this. This won’t be any real life requirement, but just for the sake of understanding, I have chosen this scenario.\nLet me just follow the steps mentioned above.\"/>\n\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create views\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic17.png\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So here NewView .view.xml is the new view that I have created in the view folder, similarly I have created the NewView.controller.js  in the controller folder. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Instantiate the Nested view in the views. I will Instantiate it in the App.view.xml and S2.view.xml.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"App.view.xml\" width=\"100%\"/>\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic18.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"S2.view.xml\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic19.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Now, mention the code in the new view\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic20.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now that been done, our purpose here is done. We have reused the text 2 times in two different views. I am sharing my output here.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic21.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic22.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, this was all Nested Views in SAPUI5. You  might want to take a look at my previous tutorial on Fragments in SAPUI5.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For any queries, mail me at sapui5tutors@gmail.com. Hope I served well.Thanks!\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/FormatterDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.FormatterDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Formatters\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Formatters\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton4\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Custom Formatters\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"If we want to do a more complex logic for formatting properties of our data model, we can also write a custom formatting function. We will add a localized status with a custom formatter, because the status in our data model is in a rather technical format.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch my video on Custom formatter and Inline Expressions\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/RzNdqvUTmc0\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, in this use case what here I am trying to do is to use a custom formatter for weigh measure and weight unit. So Here I am displaying a list of products with their particulars in the list item.  The data is coming from ES4 odata service and in that particular service, we are using the product set entityset.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The list item contains the title, intro, number, number unit, first status, second status. So in the first status we are displaying the weight unit and the measure of the particular weight, suppose 0.30 kg. So, I will display a message in the second status based on the values that we are getting from weight measure and unit.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic5.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" For that I will use a custom formatter, let’s say if the unit of the weight is in grams, then it is to be converted into KG and then I will compare it with a particular set quantity and then display the message that the particular weight is greater or less than a particular set quantity.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For example the weight that is coming from the service is 1000grams, then the formatter would first convert it into KG, i.e. 1kG and then it will compare it with another set quantity, let’s say 5KG and then it would display a message that, it is less than 5KG.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So in our use case the particular set quantities are .5kg and 5kg\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Basically, there are three steps to follow to make use of custom formatter.\" width=\"100%\"/>\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Make a folder named as model in the project directory, and then make a file named formatter.js inside it.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Next is to mention the formatter in the controller\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Lastly, use the formatter in the view, which we have used in the second status.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, just follow the first step and to load our formatter functions, we have to add it in the controller. Mention the formatter in the module and add the parameter in the controller. Just follow the code here:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic23.PNG\" />\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Let me just share the portion of code for better understanding. Here is the code for list:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic24.PNG\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Current Output.\" width=\"100%\"/>\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic25.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So here, the fields marked yellow are the first status. As you can see the first value is 0.030KG which is less than .5KG, hence after formatting, the message would appear in second status that the weight is less than 0.5kg. And similarly for others. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now the third step,we will add the code for second status:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic26.PNG\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Note that, we are using the same fields that we have used in the first status, i.e WeightUnit and WeightMeasure. And Model is the id of the oData model that we have used\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Since we have used two fields, we are mentioning the path in the parts. Also we have mentioned the formatter here, and delivery is the name of the formatter that we have used in the formatter.js.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now add the code for formatter.js:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic27.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here the value of sResult is returned to the second status, hence the desired result is achieved through custom formatter.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Desired Output.\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic28.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"I hope you understood the concept of the formatters. For any queries, mail me at sapui5tutors@gmail.com. \"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/FragmentDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.FragmentDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Fragments\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Fragments\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuIntButton5\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Fragments are reusable UI parts like views and can be used in any other app if they fit in. Fragments should only contain UI elements. It does not have controllers like views. Event handling methods for UI elements which are defined in Fragment can be implemented in the respective view controllers in which they are used.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Let’s take an example to understand them better, If an application having dialog box and this dialog box is used in many views by declaring it separately in every view. By following this approach we are declaring same UI control in many places which leads to development overhead. To avoid this we use fragments. Declare the dialog control in fragments and use the fragment where ever you need to use the dialog control.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Watch video on Fragment here:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"fragmentvideo\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/7qQjmaqKVqA\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n    \t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"They are 3 types of fragments in SAPUI5.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"1) JS Fragments\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"2) XML Fragments\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"3) HTML Fragments\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Let us create a sample application and understand it better.\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1). Create a SAPUI5 application project in Eclipse.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic10.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2). Enter the view name and click on Next or Finish.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic11.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3). Create a new folder 'fragments' under WebContent folder to store all fragments files. Right click on WebContent folder  and choose New → Folder.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4). Now create a new fragment file which contains reusable dialog control. To create fragment file Right click on newly created fragments folder → New → File. In this example we are going to create a new XML fragment.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5). Double click on the file to write the code. We start writing the code by declaring the Fragment definition and include the UI libraries which are needed to declare the UI elements in the fragments. In the code below i have declared Dialog in the fragment.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Dialog.fragment.xml\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic12.PNG\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"6). This completes our reusable fragment declaration. Next step will be call to this fragment and open the dialog in a view. To do this go to the view in the SAPUI5 application project and write the below code inside it.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"MainView.view.xml\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic13.PNG\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the view we added a button and declared a press event. The press event handler will be implemented in view controller. When you click on the button we need to open the dialog.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"7). Go to view controller and implement the 'onPress' event of the button. Inside this event handler method we will get the instance of the fragment by providing the full path and by using the same instance we can call the dialog.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"MainView.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic14.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"8). Now we ready to test the application. What we should expect is, by clicking on the button a dialog should be opened.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic15.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"9). Now we need to implement the event handler of the button Close on the popup dialog which we declared in the fragments. As mentioned earlier all the event handler implementations of the fragments are performed in respective view controllers where they are used. So  go to the view controller and write the below code to close the popup dialog.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"MainView.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Intermediate/pic16.PNG\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"10. Now save the code changes and test the application again, we should be able to close the popup dialog.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"That's it!!! Hope it helped!\"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Intermediate_tutorials/IntermediateTutorials.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.Intermediate_tutorials.IntermediateTutorials\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"Intermediatetutorials\">\n\t</SplitApp>\n</mvc:View>",
		"com/sapui5tutors/view/Dialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\" xmlns:core=\"sap.ui.core\">\r\n\t<Dialog title=\"Have a Query?\">\r\n\t\t<content>\r\n\t\t<VBox>\r\n\t\t\t<HBox>\r\n\t\t\t\t<Text class=\"sapUiSmallMargin\" text=\"Subject:\"></Text>\r\n\t\t\t\t<Input  id=\"subject\"></Input>\r\n\t\t\t</HBox>\r\n\t\t\t<HBox>\r\n\t\t\t\t<Text class=\"sapUiSmallMargin\" text=\"Content:\"></Text>\r\n\t\t\t\t<TextArea id=\"textarea\" value=\"\" growing=\"true\" width=\"100%\" rows=\"8\" cols=\"22\" wrapping=\"Soft\" />\r\n\t\t\t</HBox>\r\n\t\t</VBox>\t\r\n\t\t</content>\r\n\t\t<beginButton>\r\n\t\t\t<Button text=\"Submit\" press=\"onSubmit\"></Button>\r\n\t\t</beginButton>\r\n\t\t<endButton>\r\n\t\t\t<Button text=\"Close\" press=\"onClose\" />\r\n\t\t</endButton>\r\n\t</Dialog>\r\n</core:FragmentDefinition>",
		"com/sapui5tutors/view/WebIDE_Tutorials/WebIDETutorials.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.WebIDETutorials\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"WebIDETutorials\">\n\t</SplitApp>\n</mvc:View>",
		"com/sapui5tutors/view/app.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.app\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<App id=\"app\">\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/IntroDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.IntroDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Introduction to SAP WebIDE\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Intro to SAP WebIDE\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuWebButton3\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE (Integrated Development Environment) is a web-based tool that empowers users to rapidly create and extend applications for browser and mobile devices. It simplifies the end-to-end application lifecycle: prototyping, development, packaging, deployment, and customer extensions for SAP Fiori and SAPUI5 applications.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE offers highly efficient tools to easily build and extend apps applying SAP Fiori UX and generic SAPUI5 apps using wizards, templates, sample applications, drag and drop tools, code editor and much more.\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"routFullToSplit\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/oGQSqkVjO3I\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE is available on SAP HANA Cloud Platform and can be accessed via SAP Store for productive or trial usage.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP has brought its own IDE into play, while many users are still stuck on conventional IDE like eclipse, which by the way is the best platform for the beginners.  But for developers, who already have taken their first step towards development in sap ui5, I would personally recommend using web IDE, since it allows following proper guidelines and following best practices while coding.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Applications developed with SAP Web IDE can run on different platforms like SAP HANA Cloud Platform, SAP ABAP using Business Server Pages (BSP), or SAP Mobile Platform (SMP).\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE comes with integrated deployment options for\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) SAP HANA Cloud Platform\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) SAPUI5 ABAP Repository on a SAP ABAP Server\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) SAP Fiori launchpad\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) SAP HANA Cloud Platform mobile services\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5) SAP Mobile Platform.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Features of SAP web IDE\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Free-style coding\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE supports free-style coding by providing robust editors with capabilities of code completion (XML, property files, JavaScript and SAPUI5), code validation, pre- and user-defined code templates, and many more. Advanced Search on basis of file name across the workspace allows the users with a better coding experience.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Layout Editor (WYSIWYG) tooling\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"It allows Drag and drop editor which provides a user-friendly visual editor including control galleries to easily build and customize applications.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Wizards, Templates and Sample Applications\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Project templates provided by a wizard-based gallery allows you to create new applications with only a few clicks, following specific best practices. In addition you can create projects based on Sample Applications. Sample Applications are complete applications with all coding and mock data. They provide best-practice coding and comprehensive comments.\n\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Extensibility support\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE provides the ability to extend existing SAP Fiori applications in a nice and easy manner through a visual extensibility editor to graphically choose an element you would like to extend. SAP Fiori, cloud edition leverages SAP Web Ide to extend and customize SAP Fiori apps.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Instant preview\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE includes an instant preview so you can launch the application in the browser at different resolutions and in different languages, either with real or mock data.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Mock data support\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Mock data can be automatically generated or manually created to run the application independently for front-end/back-end development de-coupling, testing and demoing purposes.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Support for several environments\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Seamlessly run on any device - automatically renders for phone, tablet, and desktop. Integrated deployment to SAP platforms: HANA Cloud Platform (HCP), SAP ABAP, Fiori launchpad (FLP), HANA Cloud Platform mobile Services (HCPms) and SAP Mobile Platform (SMP).\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Extensible and modular architecture for “adding your own plug-ins”\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE has an extensible and modular architecture built up of plug-ins. SAP web IDE streamlines the ability to add your own plug-in/template via wizards and templates.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Benefits of using SAP web IDE\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Reduced cost and complexity\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE is offered as a cloud solution hosted on SAP HANA Cloud Platform, so no initial installation is required, and local IT infrastructure is untouched. Developers can access development projects anytime, anywhere - all that is needed is a PC with a browser. SAP Web IDE also provides you the ability to develop your application once and deploy to on premise (SAPUI5 ABAP repository), Cloud (HCP, Fiori launchpad), HANA Cloud Platform mobile services (HCPms) and SAP Mobile Platform (SMP). You can then run your application on any device - mobile, tablet, and desktop.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Increased productivity\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE aims to increase development productivity by delivering a holistic development experience, providing efficient tools e.g. templates, wizards, sample applications, visual editors, code completion, code snippets, mock data, instant preview, integrated deployment and SAP best practices to rapidly build test and deploy applications.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Empower developers, business experts and designers and reduced training effort required\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP Web IDE comes with a user experience adjusted to both, developers and non-technical people. Wizard Templates, Sample Applications and Layout Editor (WYSIWYG) tooling can be used as jump starter to create new SAPUI5 applications following the Fiori UX guidelines and help to understand SAPUI5 concepts.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Screen Shots\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here I am providing some screen shots of Web IDE, to help you understand better.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This is the first screen of Sap Web IDE, where you could start a new project from template or build a new extension project\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic1.png\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Code editor with code completion with an API reference pane.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic2.png\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"It includes, creating the project from the existing templates. You could also choose fiori like template or even master detail template.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic3.png\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Create hybrid apps using Apache Cordova and the SAP Mobile Platform SDK\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic4.png\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"It includes a code editor and Search and Replace capabilities linked to the code editor.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic5.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This was all about SAP Web IDE introduction, for any queries, mail me at sapui5tutors@gmail.com\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/MockIDEDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.MockIDEDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Setting Mock Data in SAP WebIDE\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Setting Mock Data\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuWebButton4\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will explain how to run sap ui5 application with mock data in SAP Web IDE. This tutorial would be helpful for those who don’t have a backend connectivity with the server or don’t have  a network connectivity. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here we will create a kapsel master detail sample project from Web IDE smart templates. We would be requiring only to provide basic information regarding the northwind Odata service.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Before starting with the tutorial, I am assuming that you have a free trial access of web IDE. If you don’t have the  access to it, then do register for a free trial version of SAP HANA Cloud Platform.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Okay, now let’s start with the tutorial. First of all, we will create a SAPUI5  Kapsel app with SAP Web IDE.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Open SAP Web IDE\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Click on File>New>Project from Template\"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic24.png\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Select the SAPUI5 Master Detail Kapsel Application template and click on Next\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic25.png\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Enter a Project Name and click on next\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5) Now click on Service URL and provide NorthWind URL here, and specify the service you want to access.\"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic26.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"6) Enter the necessary information you want to get from the service and click on Next\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic27.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic28.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic29.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"7) Now click on next and Finish.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"8) Now Run the Project as Web Application, everything would be working fine.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic30.png\" />\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now we, will generate some random data, i.e mock data. For that, follow the steps:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Open the model folder located under the project we have just created in SAP Web IDE\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) Right click on the metadata.xml file and select Edit Mock Data\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic31.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) In the new screen, select one by one all the collections displayed in the list and for each one click on the Generate Random Data button. And Click on Ok button\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic32.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) Now in the project directory, within the model folder, a new file named Orders.json file will be generated. Similarly if you have generated other random data, it will be created in the model folder.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic33.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"e) Now to enable the application to take the mock data, i.e to enable the application to take always mock data. Now change the init function in the Component.js file.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" f) Replace the entire statement within if and else statement  at line no. 84 in component.js with the following code:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pict1.PNG\" />\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic34.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" This code will force the application to use always the mock server with the JSON files we have just generated\nSave the Component.js file and run the application again in the desktop to check that it's now taking data from the mock server\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, this was all about running  sap ui5 application using mock data with SAP Web IDE. You should take a look at my previous tutorial using Mock Server in eclipse.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For any queries, mail me at sapui5tutors@gmail.com.\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/SettingDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.SettingDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Setting Up SAP WebIDE\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Setting Up WebIDE\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuWebButton5\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi, in this tutorial we will look forward to setting up SAP Web IDE. In my previous tutorial I have discussed about SAP Web IDE, have a look at the Introduction of SAP Web IDE . Now that you are familiar with this IDE, now I will discuss the steps to set up SAP Web IDE in the hana cloud cockpit. \"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Firstly, you would be required to register yourself at SAP HANA Cloud Cockpit(https://account.hanatrial.ondemand.com/). If you have a SCN account, you could also log in with the same credentials as you use for accessing SCN.\"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now, when you are in the cockpit, you will see a screen similar to this  \"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic6.png\" />\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Next, we will access the Web IDE, and for that, we have two methods. \"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" First method is to click on Subscriptions at the left site. In the Subscription section you will find one subscription: 'sapwebide'. Click on the Application name ('webide') of this subscription. \"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Second Method is to click on Services\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic7.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now Search SAP Web IDE in the Search bar and enable the SAP Web IDE by clicking on the tile and enabling it.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic8.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Now, click on Open SAP Web IDE and do bookmark the URL, so that it will be easy to access web IDE next time.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic9.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" So, this was all about setting sap web IDE. Now additionally, we can set up many other settings in web IDE, like:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Entering the Git User Settings\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, let’s discuss steps to set up Git User Settings.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In SAP Web IDE, Click on tools and choose Preference.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Then Click on Git Settings and then enter your name and Email address and save.\n\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic10.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Connecting to remote systems\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Do consider tutorial on configuring destination in Sap WebIDE tutorial\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So this was all about setting up SAP Web IDE in SAP HANA cloud Cockpit.  Hope you, liked this tutorial. For any queries, mail me at sapui5tutors@gmail.com\"/>\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/HelloIDEDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.HelloIDEDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Hello World\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Hello World\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuWebButton2\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" In this tutorial, I will explain how to create your first application in SAP web IDE from scratch. We will try to create a hello world application, since this is the ideal application for starters.\"/>\n\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Okay, now let us look at the process step wise. But before starting with the project, let us just revise the steps for accessing SAP Web IDE.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) First off all, create an account on SCN(scn.sap.com), it will allow access to the hana cockpit. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Now, log on to SAP HANA Cloud Cockpit, with your free developer edition account. Choose Subscriptions in the left hand pane. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Details of which applications your account is currently subscribed to is displayed. Choose webide. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4)In the Active Version area, you will see the Application URL with the active version number. Click on the URL to open SAP Web IDE. You are now logged on to SAP Web IDE and can immediately start developing. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Note(Now this is the Development Area, you are recommended to bookmark this URL, for future references.) \"/>\n\t\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic17.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" If everything has worked fine, you would be able to see this home page.\nNow, let’s start building the Hello World Application. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 1) The first step to start developing an application with SAP Web IDE is to create a new project for the application. And for this from the File menu select New and then select Project from Template\"/>\n\t\t\t    <con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic18.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 2) Now, Select SAPUI5 Application and click on Next.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic19.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) In the next window, write the name of the project and the namespace and click on next. \"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic20.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 4) In the template customization screen, provide the view type as xml and make an initial view and click next.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic21.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 5) Now it will ask for confirmation, click on finish. This should make a new project named as “NewProject”. In the workspace.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" 6) Now, let’s make some changes in the code so that we could get hello world text. Open the project by clicking the “+” sign and then open webapp folder and then open View folder and then view1.view.xml. Now in the Page title, just add the text “hello world!!” and within the content tags, add the following code:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic14.png\" width=\"80%\"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic22.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\n7) Finally, let’s just run the project. Right Click on the project, and then go to run as Web Application. \"/>\n<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic23.png\" width=\"80%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" \"/>\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/ConfigureDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.ConfigureDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Configure Destinations in SAP WebIDE\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Configure Destinations\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuWebButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Hello folks! In this tutorial, I will help you to configure destinations in Sap Web IDE. In normal scenario, we require a odata service which we have to integrate with the frontend, to display the data on the UI. Similarly, here we will use northwind service as an example for setting the destination in Sap Web IDE.\nFirst Step is to login to your SAP hana cockpit account (https://account.hanatrial.ondemand.com/), if you don’t have an account, register yourself for a free trial account.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now, click on the destination bar on the left side of the screen, and create a new destination.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic11.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now, a form will pop up, and you will be required to fill in all the information. Use these information\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic12.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Provide Cloud Connector version as 2 if asked. \"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic13.png\" />\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Please make sure, you have entered the details correctly and do mention additional properties too. At this stage you have done your bit, the destination is set. You will be able to this screen, northwind service has been added to your destination.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic15.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Now to check if your service is working correctly, click on the star like button, ie the check connection button. It should show a message that your connection is successful.\nCongratulations!! You have setup your destination correctly and with success.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/WebIDE/pic16.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\nHope you, liked this tutorial. For any queries, mail me at sapui5tutors@gmail.com.\"/>\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/WebIDE_Tutorials/WebIDEMaster.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.WebIDE_Tutorials.WebIDEMaster\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Topics\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t\n\t\t\t\t<content>\n\t\t\t\t<List id=\"WebIDEList\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Interview_Tutorials/InterviewTutorials.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Interview_Tutorials.InterviewTutorials\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Interview Questions on SAPUI5\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuInterButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<IconTabBar id=\"idIconTabBar\" upperCase=\"true\"\n\t\t\t\tbackgroundDesign=\"Transparent\" select=\"handleIconTabBarSelect\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"InterviewA\" text=\"Part A\"\n\t\t\t\t\t\tkey=\"InterviewA\">\n\t\t\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"1) What is required to start UI5 development in eclipse?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) In the help menu in Eclipse, click “Install New Software”, paste one the URL according to the version of the Eclipse.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"https://tools.hana.ondemand.com/luna \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"for Eclipse Luna (4.4)\nhttps://tools.hana.ondemand.com/kepler for Eclipse Kepler (4.3)\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"just import SAP UI5 toolkit from hana service marketplace. Also we need SAP UI5 ABAP Repository connector to deploy project in ABAP System.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"2) Which control libraries are used for UI5 application development?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) sap.ui.commons, sap.ui.table and sap.suite.ui libraries for desktop application development and sap.m library along with sap.ui.layout for Fiori application development.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"3)How Navigation works in SAPUI5.\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) Sap uses two mechanisms, routing and EventBus. Routing Is specifically used for bookmarking the URL. We define routing in component.js within the metadata. It also defines the navigation path and hash changer which is used at the runtime to change the url of the particular screen.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"4) What is Component?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) It is the first point of the application, it serves as an index, which encapsulates all the application details, like  view names, routing details, main view, applications type(Full Screen or SplitApp), application service configuration etc.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"There are 2 types of components,\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Faceless components: Mainly without UIs, Used for business logic and helper methods e.g. Formatters.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) UI Component: typically component.js file which is made by extending sap.ui.core.UI Component class.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"5) What is Responsive Web Design?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) A web application which gives same look and feel to the user in desktops and mobile devices.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"6) What is the syntax to define a control in UI5?\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Interview/pic1.PNG\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"7) What is formatter in SAPUI5 and how to use it?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) We need to use formatter when we need to perform some changes on the back end property data on the front end.\nwe can use formatter while data  binding to a property like as follows:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Interview/pic2.png\" width=\"70%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"8) How many types of views are available in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) There are 4 types of views available:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) JS view\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) JSON view\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) XML view\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) HTML view\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"9) How many types of data model are available in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) SAPUI5 has following predefined four data models available:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1. JSON Model – Client-side model, supports two way binding.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2. XML Model – Client-side model and intended for small data sets this is very rarely used model.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3. Resource Model – This is also client side model used to maintain resource bundles, specially texts.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4. ODATA Model – This is most important model of the four provided.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"10) What all events/life cycle are available in SAPUI5’s views controller?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"There are 4 lifecycle available in SAPUI5’s views controller, they are:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1. onInit() – it is called when a view is instantiated and its controls have already been created.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2. onExit() – it is called when the view is destroyed, used to free resources and finalize activities\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3. onAfterRendering() - when the view has been rendered and, therefore, its HTML is part of the document.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4. onBeforeRendering() -It is called before the controller view is re-rendered and not before the first rendering. \"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"11) What is the main difference between OData Model and JSON Model?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) The JSON model is a client-side model and, therefore, intended for small datasets, which are completely available on the client.The OData model is a server-side model: the dataset is only available on the server and the client only knows the currently visible rows and fields.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"12) What is SAPUI5 Bootstrapping?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) SAPUI5 Bootstrapping means loading and initializing SAPUI5 in any HTML page. Themes and Libraries are defined in this.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"13) In how many ways you can bind data to your controls?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) We can bind data to any controls using three methods, Property, Element and Aggregation binding.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"14) What are SAPUI5 Fragments?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) Fragments are very light weight UI controls. Fragments are not completely like views but they act like a view. Fragments are defined similar like views and are names like “Fragment.fragment.xml“.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"15) Does Fragment have its own controller?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) Fragments are created without controllers, they don’t have their own controllers they share controller of the view which is invoking it.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"16) What is Metadata Annotations?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The service metadata document describes the structure of all resources in the service. This structural metadata makes it easy to understand a service. We can explore service metadata at the address “$metadata” relative to the service root.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"17) What is SAP Fiori?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) SAPUI5 is client side HTML5 rendering framework or library and SAP FIORI is collection of and released as waves of applications which are completely based on SAPUI5 framework. It means we can create applications using SAPUI5 framework and SAP FIORI is final product i.e. application. In SAPUI5 we have to code from scratch, but in Fiori Application the custom application is already built and enhancements can be done on those custom apps.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"18) How many types of fiori applications are there?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Ans) There are 3 types of fiori applications:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Transactional\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) Analytical\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) Fact Sheets\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"19) What is the difference between SAP Fiori and SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAP FIORI is collection of standard applications based on SAPUI5 library provided by SAP. SAP FIORI applications share some standard design guidelines and way in which these application are developed.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"20)  What is FIORI Launchpad and Explain it?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"It is  a home page for all the FIORI applications provided to. There are more than five hundred custom app provided by SAP. This shows tile based UI where every UI redirects to assigned FIORI application. This Launchpad is fully customizable according to your needs like theming and all.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"21) How can you get the web browser of the client on which SAP Fiori application is running?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAPUI5 library provides a special API “sap.ui.Device“which can be used to for device and its feature detection. This API provides flags like “chrome”, “firefox”, “mozilla”, “edge” etc. in “sap.ui.Device.browser” API which returns boolean values. \"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"22) What are Fiori Design Principles?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"There are 5 design principles we need to keep in mind while designing SAP Fiori applications. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Role Based\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) Delightful\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) Simple\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) Responsive\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"e) Coherent\"/>\n\t\t\t\t\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t<IconTabFilter id=\"InterviewB\" text=\"Part B\"\n\t\t\t\t\t\tkey=\"InterviewB\">\n\t\t\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"1) Which open standards and tools are the foundation of SAPUI5 technology? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> D3.js for visualization\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> ARIA for accessibility standards and keyboard handling\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"> jQuery for managing DOM elements and abstracting browser differences\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 2) What SAPUI5 control metadata is used to configure the UI elements at runtime? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Associations\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Properties\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Aggregations\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  3) What are view types offered by SAPUI5? \" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> JavaScript views\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> JSON views\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> XML views\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  4) What is the purpose of a controller? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To separate the UI and the processing logic\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To control the application flow by handling user events or updating the view\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   5) Name some standard controller hooks in SAPUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> onInit – an event that is called when the view and the controller are instantiated\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> onExit – an event that is called when the view and the controller are destroyed\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"    6) What does MVC stand for? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->Model - View – Controller\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 7) What information can be stored in the manifest.json file of your app? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"- > Root view\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Supported device types\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Supported themes\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"8) Which of the following namespaces can be used in the manifest.json file?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui5\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.app\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 9) What is the name of the file where the descriptor for applications, components, and libraries is stored?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Manifest.json\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 10) For what stands the abbreviation JSON?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Java Script Object Notation\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 11) Which data binding mode means a binding from the model to the view and from the view to the model (value changes in the model and in the view update all corresponding bindings and the view and model, respectively)?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Two-way\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  12) How would you add an icon from the SAPUI5 icon font to a button in an XML view?\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Interview/pic3.png\"  />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" Which predefined sizes for margins that stand for 8px (0.5rem), 16px (1rem), 32px (2rem), or 48px (3rem) are available in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> 'Tiny', 'Small', 'Medium' or 'Large'\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"14) What is aggregation binding used for?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To bind a set of data entities to a list-like structure\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 15) Your JSONModel contains the following content:\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Interview/pic4.png\"  />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"What is the binding path to Karl Karlson's first name?\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> /Employees/0/Firstname\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 16) What do you need if you want to bind a list to data in your JSONModel?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> An array with the data in the JSONModel that you want to bind to the list\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A template list item to be cloned\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A bound list control\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 17) How can you access validation errors in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Set handleValidation to true in the manifest.json file.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Register to the validationError event on sap.ui.getCore().\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 18) Name some types in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui.model.type.Float\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui.model.type.DateTime\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui.model.type.Currency\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  19) What coding do you need to add to your XML view to enable grouping in your list binding?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> group: true\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  20) Which of the following sequences of steps do you use to assemble the URL to access your OData service's metadata?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->  Run your app from SAP Web IDE and copy its URL into a new browser tab.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> In your app's manifest.json file, go to “services”, copy the URI, and use it to replace the file path in the URL from Step 1.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Append “/$metadata” and press enter.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 21) How many filters can you apply on a list binding?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> As many as needed\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  22) What is the best practice for showing or hiding an SAPUI5 control at runtime?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Set the “visible” property of the control to “true” or “false”.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  23) When do you use element binding?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> When you want bindings of child controls to resolve their paths relative to the binding of the parent\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  24) What is the difference between aggregation binding and element binding?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Aggregation binding is used for list-like structures, whereas element binding can be used to set the binding context of any parent control.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 25) How is paging accomplished in oData query?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->Paging can be accomplished by using $skip in combination with $top. The parameters’ values describe the interval of the data that is requested.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  26)  Name some OData query parameters?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->$skip\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->$count\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->$expand\"/>\n\t\t\t\t\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"InterviewC\" text=\"Part C\"\n\t\t\t\t\t\tkey=\"InterviewC\">\n\t\t\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 27) How do you enable the debugging option for SAP NetWeaver OData services? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Use the URL parameter sap-ds-debug=true.\"/>\n\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  28) What do you have to consider when choosing the SAPUI5 version for the application template? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The SAPUI5 version must be available in your target deployment system.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   29) What happens when you set the “minScreenWidth” property of a “sap.m.Column” to “Tablet”? \" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The column is shown only on screens that are larger or equal than the size of a tablet.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  30) What are semantic colors in sapui5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> They are representations of states such as success, warning, and error.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   31) Name some semantic states in SAPUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Positive\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Negative\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Critical\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"    32) How can you compose filters in SAPUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> By creating multiple filters and concatenating them either with AND or OR\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> By creating a single sap.ui.model.Filter object and specifying a path, an operator, and up to two values\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 33) Where are filters applied in SAPUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To an aggregation binding\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"34) Which filter operation can you use to filter items with a numeric value lower than X?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui.model.FilterOperator.LT\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 35) What can you do to enable your SAPUI5 application to adapt to the user’s device?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> As many controls are responsive out of the box, check whether you have to do anything at all.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Set the compact density on devices without touch support.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 36) What can a “device model” be used for?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To check whether a device supports touch interaction\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To influence the user interface without coding, based on the characteristics of the device\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 37) What information is provided by the sap.ui.Device API?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The device type (phone/tablet)\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Whether the device has touch support\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The browser name and version\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  38) Which control adapts its appearance on touch devices?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->The PullToRefresh control: It is represented as a simple button on non-touch devices, but the user needs to pull the page content down on touch devices to refresh it.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 39) Why is it useful to have fragments in your app?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To create reusable UI parts without a designated controller or other behavior code\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"40) What happens in the DOM tree when nesting XML views?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Each XML view creates its own DOM element regardless of the nesting level.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 41)  What can you do to structure your application code better?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Use subdirectories for related views and controllers.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Use fragments to define reused UI parts only once.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Put the functionality used in multiple controllers into a base controller and extend this controller in the other controllers in your app.\"\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 42) What are fragments primarily used for?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To make parts of your view reusable\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 43) What are Dialogs in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> They are rendered into a specific area (the static area) in the DOM.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> They need to be added to the “dependent” aggregation of the view to get access to the models.\n\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 44) What happens when you instantiate a dialog from a single-rooted fragment?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The dialog instance is returned when you invoke the fragment factory.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> The dialog is instantiated but not displayed.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  45) Which property of the routing configuration in the manifest.json file should you use to automatically display a target that is not found?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Bypassed\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  46) How many targets can you configure within a route in the manifest.json file?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->  As many as you like.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 47) What is the correct sequence of called functions / handled callbacks of the OData model in the Add controller?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> on metadataLoaded - createEntry - submit - on success\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  48)What is the recommended place to configure a 'TwoWay' binding for the OData model so that data changes in the view are written back to the model?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> In the 'models' section of the manifest.json file\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  49) How are unit tests for your app started in SAP Web IDE?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> By selecting the run configuration Run Unit Tests\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> By right-clicking the unitTests.qunit.html file and selecting an option from the Run menu\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  50) How do you register a unit test in QUnit?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Call QUnit.test() in your test code with a speaking test description and a callback that contains at least one assertion.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 51)  Which testing features are provided by the SAP Fiori Worklist application template?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A test suite that calls all your unit and integration tests\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Clear separation of test and production code\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Unit test setup (QUnit) and basic test coverage\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  52)  Which options are available in SAPUI5 if you want to create a custom control?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Extend an existing control with your own features.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Create a composite control that reuses existing controls internally.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Extend the sap.ui.core.Control base class and build a new control.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  53)  Which of the following are part of the control metadata?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Aggregations\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Properties\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Events\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  54)  What do you have to consider when defining control metadata?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> You can give an aggregation either one or many values by defining the multiplicity as “one” or “many”.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> You can make an aggregation invisible in the control API by setting the visibility to hidden.\"/>\n\t\t\t\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"InterviewD\" text=\"Part D\"\n\t\t\t\t\t\tkey=\"InterviewD\">\n\t\t\t\t\t\t<content>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  1) What is OpenUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A subset of SAPUI5 containing the complete core and more than 200 UI controls\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A free-to-use and open source UI library ready for your contributions\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   2) How can you load SAPUI5 to your application? \" width=\"100%\"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\t\thtmlText=\"-> Load it from the content delivery network (CDN) athttps://sapui5.hana.ondemand.com (orhttps://openui5.hana.ondemand.com) without installing it on your own server.\"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\t\thtmlText=\"-> If only features contained in OpenUI5 are needed, download it fromhttp://openui5.org, put it on your Web server, and load it from there.\"/>\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\t\thtmlText=\"-> SAPUI5 comes with current versions of the SAP NetWeaver ABAP and Java server and SAP HANA Cloud Platform. If you are a customer, you can load it from there.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"    3) What is the correct syntax for defining namespaces in XML views? \" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> xmlns:m='sap.m'\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   4) Why is not all JavaScript code put in a 'script' tag directly on the index.html page? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To clearly separate concerns according to the MVC concept\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To make your code much easier to read and maintain\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To enable your code to dynamically load resources as they are needed\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  5) What is a component within SAPUI5? \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> An independent and reusable part that can be used to structure SAPUI5 applications\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  6) What information can be stored inside the manifest.json file of your app?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Content densities\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Root view\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Models of your app\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  7) What is the benefit of data binding within SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> SAPUI5 uses data binding to bind two data sources or information sources together to keep them in sync. This means: All changes in one source are also reflected in the other one.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 8) How can you add a margin all around a control\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> class='sapUiSmallMargin'\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" \n9) Which base class are you recommended to extend when implementing a custom type?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> sap.ui.model.SimpleType\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  10) How can you distinguish absolute and relative binding paths?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" -> Absolute binding paths always start with a '/'.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  11)How to sort and group your sap.m.List when added to the view.xml?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Interview/pic5.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   12) How can you access the list item control in an event handler for the press event?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Call the getSource() method at the event object parameter.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  13) What is the role of the application template in the development process?\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> To generate an initial set of files that serve as the starting point for the development of a productive application\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 14) How can sap.m.Table behave on smaller devices such as phones and tablets?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> It hides less important columns.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> It displays less important columns as a 'pop-in'; it stacks them vertically inside the row making the table larger in height.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  15) Which filter operation is appropriate for a textual search in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"sap.ui.model.FilterOperator.Contains\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  16) Which responsiveness features can you realize by setting standard CSS classes provided by SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Adding different margins to controls depending on the screen size\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Hiding controls depending on the screen size\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  17) Which options for code reuse are available in SAPUI5?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Controller inheritance\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Nested views\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Fragments\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" 18) When should you put code from your view into a separate view or fragment and nest it into the original view?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> When you realize that you need to reuse this code in several other places and views in your app.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   19) What do you have to do to grant a dialog access to the surrounding view’s models?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Add the dialog to an aggregation of the view, for example the 'dependent' aggregation.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   20) What is the purpose of the 'Static Area' in the DOM?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->  To display dialogs and popup controls over the application UI\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  21) Which benefits does the hash-based navigation in SAPUI5 offer?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Hash-based navigation adjusts the current hash to your interactions with the app, so that the URL can always be bookmarked.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> It allows you to build one-page apps where the contextual navigation is done by changing the hash, so the browser does not have to reload the page.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   22) What do you have to do to be notified when the hash has changed to a certain pattern?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> Register to the patternMatched event of the route.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  23) What is Sinon.JS?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> A standalone unit testing library for JavaScript that provides spies, stubs, and mocks\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"   24) Where does OPA fit in the testing pyramid?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> In component/integration tests\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"  25) Why is automated testing beneficial for app development?\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"-> It significantly reduces the manual testing effort.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->It is easier to hand over the app to other developers.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"->You can avoid regressions and bugs in your code\"/>\n\t\t\t\t</content>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t</items>\n\t\t\t\t\t</IconTabBar>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Video_Tutorials/VideoTutorials.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Video_Tutorials.VideoTutorials\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Videos on SAPUI5\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Videos on SAPUI5\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuVidButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\n\t\t\t\t<content>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t\n\t\t\t\t<Text text=\"Its gonna be AWE.... wait for it... SOME!\" class=\"sapUiSmallMarginBegin sapUiTinyMarginTop sapUiTinyMarginEnd sapUiTinyMarginBottom Tiletopictext\"></Text>\n\t\t\t\t\t\n\t\t\t\t\t</HBox>\n\t\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Introduction to SAPUI5\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"introduction\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/p9-pd7yGAcY\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Routing Concepts\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Routing1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/VF2LVxPaYFo\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t<html:iframe class=\"labelsize\" id=\"Routing2\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/fL0kTJo1zEs\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Charts in SAPUI5\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Charts1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/GGfO1-L0EU8\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t<html:iframe class=\"labelsize\" id=\"Charts2\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/7gKJeu7QfiE\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Web IDE Fundamentals\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"IDE1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/oGQSqkVjO3I\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t<html:iframe class=\"labelsize\" id=\"IDE2\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/FNrWd8_meEg\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Project Structuring(Component.js,manifest.json)\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Structure1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/-vhBWvtDjmA\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t<html:iframe class=\"labelsize\" id=\"Structure2\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/eECncPhsPJI\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Project Structuring(Globalization i18n)\" />\n\t\t\t\t\t</HBox>\n\t\t\t\t\t<HBox>\n\t\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Structure3\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/paKQCoe6uhY\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t\t</HBox>\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Defining the UI concepts\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"UI1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/8TfsVOw_lBY\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t<html:iframe class=\"labelsize\" id=\"UI2\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/SUPdtROYCSI\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Containers in SAPUI5\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Containers1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/9CWh-QOdbk4\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Data Binding in SAPUI5\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Binding\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/sr0rCqoqQ_I\" frameborder=\"0\" allowfullscreen=\"true\"/>\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAPUI5 List - Searching, Sorting, Grouping\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"List\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/NXXbR-tK4Zg\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Reusability - Fragments and Nested Views\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Reusable\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/NXXbR-tK4Zg\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Formatters and Inline Expressions\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Formatters\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/RzNdqvUTmc0\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"MockServer in SAPUI5\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"Mock\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/moR1U3hgPCE\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Binding JSON - 3 simple Steps\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"JSON\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/dWh6r4LVVjM\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<VBox>\n\t\t\t\t\t<HBox>\t\n\t\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Implementing CSS\" />\n\t\t\t\t\t</HBox>\t\n\t\t\t\t\t<HBox>\n\t\t\t\t\t<html:iframe class=\"labelsize\" id=\"CSS\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/_L6kO9dUBWE\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t\t\n\t\t\t\t</HBox>\t\n\t\t\t\t</VBox>\n\t\t\t\t\n\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Routing_Tutorials/SplitDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Routing_Tutorials.SplitDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Routing in Split App\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Routing in Split App\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuRouButton3\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, we will implement routing in a Split screen application. The scenario is, there would be 3 Pages, one is the master Page and other two are the detail Pages and we will show navigation to one detail page to another through the click of a list Item on the first detail page.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Routing in general and within a full screen Application\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/fL0kTJo1zEs\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Follow these simple steps:\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create a SAPUI5 Project, name it accordingly.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic11.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have named it as Splitapp_routing\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Create 4 views and controllers:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) App.view.js and App.controller.js\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) masterpage.view.js and masterpage.controller.js\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) detailpage.view.js and detailpage.controller.js\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) detailpage1.view.js and detailpage1.controller.js\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"I have defined routes in the Component.js this time unlike my last post, where I have defined the routes in index.html.\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Index.html\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic12.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"App.view,js:\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic13.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"masterpage.view.js:\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic14.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"masterpage.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic15.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Detailpage.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic16.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"detailpage.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic17.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"detailpage1.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic18.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"detail.json\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic19.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, in the Json, I have used many .png and .jpg images, you can use your own images.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic20.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic21.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope it Helped!!! Thanks….. \"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Routing_Tutorials/FullToSplit.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Routing_Tutorials.FullToSplit\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Routing in Full to SplitApp\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Full to Split Routing\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuRouButton2\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, we will implement routing in a full screen to a split screen, hence clearing all aspects of routing. The scenario is, there would be 4 Pages, out of which 1st three are full screen pages and last one is a split screen.\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"routFullToSplit\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/fL0kTJo1zEs\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Follow these simple steps:\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create a SAPUI5 Project, name it accordingly.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic22.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have named it as “route”, you can choose your own project name.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Create 4 views and 4 controllers, for full pages and 3 views and 3 controllers for split screen, since we are showing navigation among these pages.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have created 4 views and 4 controllers with the name App.view.js which describe the full screen, page1.view.js, page2.view.js, page3.view.js and oapp.view.js which describe the split screen, omasterpage.view.js, odetailpage.view.js, similarly there controllers.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Start coding in the component.js file for the adding the routes. \"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Index.html\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic23.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Create buttons in each Page, for navigating from one Page to another. \"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"App.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic24.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Page1.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic25.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Page2.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic26.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Page3.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic27.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Oapp.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic28png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Omasterpage.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic29.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Odetailpage.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic30.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic31.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic32.png\" />\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Component.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic33.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" Output Page 1\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic34.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" Output Page 2\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic35.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" Output Page 3\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic36.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" Output Page 4\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic37.png\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope it Helped!!! Thanks….. \"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Routing_Tutorials/RoutingTutorials.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.Routing_Tutorials.RoutingTutorials\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"RoutingTutorials\">\n\t</SplitApp>\n</mvc:View>",
		"com/sapui5tutors/view/Routing_Tutorials/RoutingMaster.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Routing_Tutorials.RoutingMaster\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Topics\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t<content>\n\t\t\t\t<List id=\"RoutingList\" />\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Routing_Tutorials/FullDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Routing_Tutorials.FullDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Routing in Full App\">\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Routing in Full App\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuRouButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, we will implement routing in a full screen application. The scenario is, there would be 3 Pages, and we will show navigation to every page through buttons.\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    \tsrc=\"https://www.youtube.com/embed/VF2LVxPaYFo\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Follow these simple steps:\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create a SAPUI5 Project, name it accordingly.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic1.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have named it as “nav”, you can choose your own project name\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Create 3 views and 3controllers, since we are showing navigation among these 3 pages.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here, I have created 3 views and 3 controllers with the name new.view.js, new2.view.js, new3.view.js and new.controller.js, new2.controller.js, new3.controller.js.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Start coding in the index.html file for the adding the routes. This is not the best way for routing, since we add the routes in component.js file, which is made separately. Still, in this project we will add routes in index.html file.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Index.html\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic2.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic3.png\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic4.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Here callback function defines the default view, or if the view is not found then what viewhas to be loaded.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) We define the router using the class sap.ui.core.routing.Router(myroutes)\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) Then we register the router, so that it could be used anywhere within the application\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) Then we Initialise the router.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Create buttons in each Page, for navigating from one Page to another.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"new.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic5.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"new2.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic6.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Place the buttons in page’s content.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"new3.view.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic7.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output - Page 1\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic8.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output - Page 2\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic9.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Output - Page 3\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Routing/pic10.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope it Helped!!! Thanks….. \"/>\n\t\t\t\t</content>\n\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/Advanced_Tutorials.view.xml": "<mvc:View controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.Advanced_Tutorials\" displayBlock=\"true\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns=\"sap.m\">\n\t<SplitApp id=\"Advancedtutorials\">\n\t</SplitApp>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/VizChartsDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.VizChartsDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Viz Charts\" >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Viz Charts\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton6\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hi, in this tutorial, we will learn how to design charts. SAP provide different controls for charts, like makit, viz charts, VizFrame. Viz Charts are simple to create and to understand. However,  SAP no longer supports Viz charts, it emphasize developers to use VizFrame, viz charts are now depreciated since 1.32.0, are no longer actively developed and won’t be getting any new features. Still for newbies, viz charts might provide a better understanding about the charts.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Viz charts is available in sap.viz.ui5. We will go through this control with the help of a simple example of a bar chart depicting the no. of population over the years for a particular set of countries.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Forbetter understanding watch the video here:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/GGfO1-L0EU8\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\n    \n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" India: '13000',Pakistan: '5600',America: '10000',NewZealand: '1000' \"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic26.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Steps\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create SAPUI5 application in Eclipse and provide an appropriate name to it.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic27.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) In the charts folder create a fragmentchart.view.js and refer the code\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic28.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3)In the charts folder create a fragementchart.controller.js and refer the code.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic29.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Copy Paste the code in index.html file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic30.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5) Maintain the Json file(chartdetail.json)\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic31.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"6) Execute index.html file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic32.png\" />\n\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Chart type can be changed according to need,  just change the control to column, line etc, just like we have used “bar” here.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"var Bar = new sap.viz.ui5.Bar\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Points to keep in mind\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Create data set\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) Flattend dataset consists of dimensions and measures. Dimensions are generally used for axis, and measures are used for value trends.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) Bind flattend dataset to chart\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) Dimesions and Measure depends on the type of chart. It mostly depends on the type of requirement.\"/>\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/MapDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.MapDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page  >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Google Map Integration\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton3\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will show you how to create Google developer API key and then how to use it in sap ui5 application to integrate google maps. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To integrate Google Maps to sapui5 application, you will need  google map API. There are several API available for Google maps itself, like Google Map android API, Google Maps for IOS, Google maps for Street, Google maps Directions API, similarly many more. The one we are going to use is Google Maps JavaScript API.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To use google API, you will need particular developer API key. The google Maps JavaScript APIs will only work with a Browser key. APIs of the same platform can use the same key. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now before proceeding with sapui5, I will just quickly go through with how to create a developer key and how we will use it in our sapui5 application.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Go to https://adf.ly/1dWmyJ\"/>\n\t\t\t\t<!--<Link href=\"https://console.developers.google.com/flows/enableapi\"-->\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Create or select a project.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Click Continue to enable the API and any related services.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) On the Credentials page, get a Browser key (and set the API Credentials). \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Hereby, your API developer key will be created and then you can use it in your application.\nTo specify a key, include it as the value of a key parameter when loading the API.\"/>\n\t\t<!--\t\t<FormattedText class=\"labelsize\" width=\"90%\"-->\n\t\t<!--\t\thtmlText=\" For example:'tag'script async defer src='https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap'-->\n  <!--type='text/javascript''script endtag'\"/>-->\n  <con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic22.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope you got the basic idea how to create your API key, now that’s done, lets focus on how to use it in sap ui5 application.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Lets’ make an application, in which we will integrate google maps.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Step 1. Create a new Project in Eclipse, here I am naming it demo_GoogleMaps\t\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic15.png\" width=\"70%\" />\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Step 2. Now, in the index.html file add the URL containing your API Key. Also add your first page, here I have named it as app.view.xml.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic16.PNG\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Step 3. In the app.view.xml file and the following piece of code:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic17.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here I have added new page, and named it as maps.view.xml. In this page I will add the google maps.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Step 4. Now in the maps.view.xml file I am placing a VBox and inside this VBox, I am placing three HBox. In the first HBox, I am placing search field and the distance button and in the second HBox, I am placing the input box for distance calculation. Lastly, in the third HBox I will place the map.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic18.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Step 5. We will do most of the coding in maps.controller.js file. I am adding the code here, I will try to explain it step wise through comments.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Find the code for maps.controller.js from here: http://www.sapui5tutors.com/2016/05/integrate-google-maps-with-sapui5.html\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"External Style Sheet\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Search a Place on the map\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic19.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Find Distance among two places\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic20.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"On clicking a place on a map\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic21.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Hope You loved this tutorial blog on Integrating Google maps with SAPUI5 application. For any queries mail at sapui5tutors@gmail.com \"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/AdvancedMaster.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.AdvancedMaster\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Topics\" showNavButton=\"true\"\n\t\tnavButtonPress=\"onNavBack\">\n\t\t\t\t<content>\n\t\t\t\t<List id=\"basiclist2\"/>\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar>\n\t\t\t<Button text=\"Have a Query?\" press=\"click\" icon=\"sap-icon://question-mark\"></Button>\n\t\t</Toolbar>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/MockDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.MockDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Mock Server\" >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Mock Server\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton4\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For better understanding on Mock Server watch this video\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/moR1U3hgPCE\" frameborder=\"0\" allowfullscreen=\"true\"></html:iframe>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will explain how to run SAPUI5 applications through mockserver with the dummy data, i.e mock Data\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For development an d testing purpose, one must make use of mockserver. Since, the availability of the real time server is a question, therefore it is recommended for the testing purpose, mock data is used in place of the actual data coming from the real server.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"It is created at the system level itself, so that when the actual server is not available, testers can make use of this server and test their applications with ease without worrying the availability of actual data. Now for the purpose of mockserver, developers often make mock data similar to the actual data. It serves local files, but it simulates a back-end system more realistically than just loading the local data\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The mock server runs on the client and only uses the server terminology of 'start' and 'stop'. It does not require a network connection since there is no actual server involved.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The mock server needs the following require statement:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"jQuery.sap.require('sap.ui.core.util.MockServer'); \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Files that are needed:\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"mockServer.html (Similar to index.html)\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This file is similar to index.html file, just the difference here is we provide the destination of mockserver.js , the title can be changed accordingly, moreover the path also is chaged. This file is now placed in a test folder within webapp, i.e  webapp/test/mockServer.html.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Example Code:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic11.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We copy the index.html to a separate file in the webapp/test folder and name it mockServer.html. From this point on, you have two different entry pages, one for the real “connected” app (index.html) and one for local testing (mockServer.html). You can freely decide if you want to do the next steps on the real service data or on the local data within the app.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"If no connection to the real service is available or the proxy configuration from the previous step does not work, you can always use the mockServer.html file. This will display the app with simulated test data. The index.html file will always load the data from a remote server.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"metadata.xml\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The metadata file contains information about the service interface and does not need to be written manually. If you are using a particular OData service,  then to create metadata of the particular service.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To do so, call the metadata of the service in a browser and save it into metadata.xml  (e.g http://services.odata.org/V2/Northwind/Northwind.svc/$metadata).  Create a folder within webapp and set the name as localService. Now keep the metadata.xml file within the folder.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Mock data (json files)\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"You can let the mock server generate random mock data automatically based on services metadata. For this, provide only the path to the metadata file and omit the second parameter of the simulate function as follows:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic12.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"You can provide your own mock data in .json files, which can either be created manually or saved from an OData service response. Mock data in JSON format can be generated from an OData service by adding the $format=json parameter to the URL.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Save the browser response which is called 'entity type name'.json, for example Mock.json and put it into the mock data folder. Add the path to the simulate function\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"mockServer.js\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We load the MockServer module as a dependency and create a helper object that defines an init method to start the server. This method is called before the component initialization in the mockServer.html file above. The init method creates a MockServer instance with the same URL as the real service calls.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"The URL in configuration parameter rootURI will now be served by our test server instead of the real service. It matches the URL of our data source in the descriptor file. Next, we set two global configuration settings that tell the server to respond automatically and introduce a delay of one second to imitate a typical server response time. Otherwise, we would have to call the respond method on the MockServer manually to simulate the call.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To simulate a service, we can simply call the simulate method on the MockServer instance with the path to our newly created metadata.xml. This will read the test data from our local file system and set up the URL patterns that will mimic the real service.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Finally, we call start on oMockServer. From this point, each request to the URL pattern rootURI will be processed by the MockServer. If you switch from the index.html file to the mockServer.html file in the browser, you can now see that the test data is displayed from the local sources again, but with a short delay. The delay can be specified with the URI parameter serverDelay, the default value is one second.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This approach is perfect for local testing, even without any network connection. This way your development does not depend on the availability of a remote server, i.e. to run your tests.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic13.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"mockServer.js file is placed in test folder, i.e webapp/test/mockServer.js \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Here is the sample project structure snapshot\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic14.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This was all about Mock Server, in the next blog I will show you how to create MockServer with SAP Web IDE. \"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"For any queries, mail me at sapui5tutors@gmail.com\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/ComponentDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.ComponentDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page>\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Component Preload\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton1\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\" How to remove component-preload.js error/ How to optimize sapui5/fiori application\nProblem\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"When applications run locally, on a computer with lightning-fast read speeds from the disk, the performance impact is negligible. However, when web applications need to be loaded into the browser there is a noticeable difference in speed between downloading a single large file and downloading many smaller files.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Solution \" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SapUi5 offers us many built in controls like table, list, and different kinds of forms and so on, which helps to develop almost any type of required application. What if we have a requirement, apart from what already exist in sapui5? The best probable solution might be to create a custom control.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"One of the way to remove the error is by just making a simple file named as Component-preload.js in the project directory. This would remove the error, but it’s not the correct way to handle the error. Since it doesn’t really does the purpose of component-preload.js file, ie. Optimizing the project.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In order to improve loading performance, we need to package the Javascript files in a way that allows us to only send one file to the browser that contains all of the code. SAP packages their UI5 libraries into single files called 'preloads'. This same method can be used for the application code of UI5 apps. In order to make the packaging step as quick as possible we will use a Javascript task runner.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Tools Required\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Automated build steps for Javascript projects are quite popular these days and projects like Grunt(http://gruntjs.com/) and Gulp(http://gulpjs.com/) are the leading Javascript task runners.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this example we are going to be using Gulp and specifically the gulp-ui5-preload(https://github.com/geekflyer/gulp-ui5-preload) plugin.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Prerequisites\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Before we can use Gulp, we first have to install Node.js(https://nodejs.org/en/) and npm(https://www.npmjs.com/) on the system.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Node.js can be downloaded for Windows and OS X from https://www.npmjs.com. npm is bundled with the Node.js installer and there is no need to install it separately.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"We are now ready to install gulp. Type the following command on the command line\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"npm install gulp -g\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"npm install gulp-ui5-preload -g\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"npm install gulp-uglify -g\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"npm install gulp-if -g\"/>\n\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Script\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Once this is done, create a new file named gulpfile.js in the root of your project (the same folder as your Component.js):\"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic40.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Replace the YourNamespace text with your project's namespace.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Executing the Code\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the project root directory execute the following command:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"gulp ui5preload\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"You should see an output similar to the following if it was successful:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic41.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In your project root folder you should now see a file named Component-preload.js. In order to utilize this preload, you have to initialize your UI5 project with the data-sap-ui-preload='sync' attribute. Here is an example of this:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic42.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"To prove that the web browser is using our Component-preload.js file, here is a screenshot of the Chrome debugging tools as the app loads:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic43.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"By loading the Javascript assets into the browser using a preload we are greatly reducing the number of individual files that have to be retrieved from the server and reducing the loading time, especially at high latencies.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"That's it, For any queries write to me at sapui5tutors@gmail.com\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/ResponsiveDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.ResponsiveDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Responsive Table\" >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Responsive Table\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton5\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this particular post, I will discuss about responsive web design in sapui5 and why responsiveness is important and how to implement responsiveness in sapui5 applications.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, responsive web design is something that makes you web site look good on any devices, be it desktop, tablets or mobile phones. Mobile phones generally are constrained by display size and space, hence to display the content on mobile phones is a challenge while keeping the responsiveness factor in mind.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Responsive design allows sapui5 applications to run on desktop, smartphones, tablets and hybrid devices. As one switches across the devices, the sapui5 application automatically adjusts the resolution, image size.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SAPUI5 offers a wide range of UI controls that automatically adjusts to different form factors, thus making the application responsive. Even though sap.m library offers controls that are responsive by default unlike sap.ui.commons library. But still there are controls like sap.m.Table which has to be made responsive by the user himself according to his requirement.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, in this post, I will show how to make a sap.m.Table control responsive.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Often, it happens that the data to be stored in table is quite a lot, including many columns and rows. In that condition, the responsiveness of the table matters. Tables with lot of data often don’t fit to the small screen, and for this SAPUI5 offers column hiding solution and popin(less imp data is skipped to next line) solution to solve this issue.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now suppose, this is our table data having too many columns.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic23.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"When displayed on the phone, then it looks something like this:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic24.png\"  />\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Notice, the field Opening Balance and Balance (important fields) are on the top and are not hidden\n\t\t\t\tAnd rest less important fields have been shifted down, we are showing them in pop-in.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, basically we can control the responsiveness of the table using 2 properties of sap.m.Column which is defined in the Table. And they are:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) minScreenWidth:  This value defines the break point of the column visibility like Tablet (600px) and Desktop (1024px). These two values are predefined sap.m.ScreenSize.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2)  demandPopin: Depending on the minScreenWidth, the column can be hidden in different screen sizes. Set the value to be true, if the particular column is to popin, instead of hiding the column itself.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, let me just share the code for the above table, so that the concept is clear.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic25.png\"  />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"So, that was it regarding the responsiveness of the table in Sapui5. Hope you understood the concept , if you have any doubts regarding this, mail to me at sapui5tutors@gmail.com\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/VizFrameDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.VizFrameDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"VizFrame Charts\" >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"VizFrame Charts\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton7\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Charts Using VizFrame Control\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Hi, in this tutorial, we will learn how to design viz frame charts. Unlike Viz charts, Vizframe charts are a bit different. SAP no longer supports Viz charts, it emphasize developers to use VizFrame, since viz charts are now depreciated since 1.32.0, are no longer actively developed and won’t be getting any new features.\nVizFrame is available in sap.viz.ui5.controls. We will go through this new control with the help of a simple example of a bar chart depicting the no. of cars bought on an yearly basis.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Forbetter understanding watch the video here:\"/>\n\t\t\t\t<html:iframe class=\"labelsize\" id=\"video1\"  width=\"90%\" height=\"90%\"\n    src=\"https://www.youtube.com/embed/7gKJeu7QfiE\" frameborder=\"0\" allowfullscreen=\"true\"/>\n    \t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Example\" width=\"100%\"/>\n    \n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"  Alto: '758620',\nZen: '431160',\nSantro: '515100',\nMatiz: '293780',\nWagon R: '1974010' \"/>\n\t\t\t\t\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic33.png\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Steps\" width=\"100%\"/>\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Create SAPUI5 application in Eclipse and provide an appropriate name to it.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic34.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) 2) In the View folder create a VizChart.view.xml and refer the code\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic35.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3)In the controller folder create a VizChart.controller.js and refer code. Define the chart and its properties in the init method.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic36.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Refer the code in index.html file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic37.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5) Maintain the Json file(chartdetail.json)\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"6) Maintain the index.html file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic38.png\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"6) Execute index.html file\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic39.png\" />\n\t\t\t\t\n\t\t\t\t\n\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Chart type can be changed according to need,  just change the viz type in viz Properties  to column, line etc, just like we have used “bar” here.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"oVizFrame.setVizType('bar');\" width=\"100%\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Points to keep in mind\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"a) Create data set\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"b) Flattend dataset consists of dimensions and measures. Dimensions are generally used for axis, and measures are used for value trends.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"c) Bind flattend dataset to chart\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"d) Dimesions and Measure depends on the type of chart. It mostly depends on the type of requirement.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"e) VizProperties genrally describe the look and feel of the chart. We can define the title of the chart here, or maybe use different colours for different bar, and similarly.\"/>\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"com/sapui5tutors/view/Advanced_Tutorials/CustomDetail.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"com.sapui5tutors.controller.Advanced_Tutorials.CustomDetail\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:con=\"com.sapui5tutors.control\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page  >\n\t\t\t\t<customHeader>\n\t\t\t\t\t<Bar class=\"BarColor\">\n\t\t\t\t\t\t<contentRight>\n\t\t\t\t\t\t\t<Image src=\"css/Image/ui6.png\" height=\"50px\" width=\"80px\"></Image>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</contentRight>\n\t\t\t\t\t\t<contentMiddle>\n\t\t\t\t\t\t\t<Text text=\"Custom Controls\"/>\n\t\t\t\t\t\t</contentMiddle>\n\t\t\t\t\t\t<contentLeft>\n\t\t\t\t\t\t\t<Button id=\"menuAdvButton2\" icon=\"sap-icon://menu\" press=\"onNavBack\" visible=\"true\"></Button>\n\t\t\t\t\t\t</contentLeft>\n\t\t\t\t\t</Bar>\n\t        \n\t    </customHeader>\n\t\t\t\t<content>\n\t\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In this tutorial, I will be taking about what is a Custom control in sapui5, how to develop it and how to use it once its implemented.  The idea is simple, we will create a simple custom control apart from what already exists in sapui5 framework.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"SapUi5 offers us many built in controls like table, list, and different kinds of forms and so on, which helps to develop almost any type of required application. What if we have a requirement, apart from what already exist in sapui5? The best probable solution might be to create a custom control.\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"How a Custom Control works\" width=\"100%\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Basically, the parent class of all the sap ui5 control is sap.ui.core which extends from sap.ui.core.Element. A control defines appearance and behavior.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Take a look at the structure of a control:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"1) Properties - Allows define its appearance and behavior on initialization.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"2) Aggregations - It lets group controls, variables, etc. It lets define some kind of containers inside a control. For example sap.m.ListBase has different aggregations items, swipeContent, headerToolBar etc.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"3) Associations - Controls can be associated with others that are not part of them. For example if we want to render a collection with next/prev functionality we could develop a previousItem / nextItem associations.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"4) Events - Control events should be related to higher level events more than standard DOM events (click, mouseover, etc). For example sap.m.ListBase has some events like select, delete, swipe etc.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"5) Appearance - Definition of our control in screen area. Every control has a render method in order to be rendered in HTML code.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" This might give a better understanding if you have come across with sap.m.ListBase control.\nSo this was the basic understanding of what a custom control is. Now, with an example let’s just try to implement a custom control. \"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic1.png\" width=\"70%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"Requirement – Speech Recognition Custom Control\" width=\"100%\"/>\n\n\t\t\t\t\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Sapui5 doesn’t offer us any control, which can be used for speech recognition. Here, I will create an inputControl and a button. The inputControl will be our custom control. So just lets start:\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"First, create a project in eclipse:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic2.png\" width=\"70%\" />\n\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\" Here, I have made the project structure. Have a look at the project structure tutorial in my blog here: http://www.sapui5tutors.com/2016/03/sapui5-application-project-structuring.html\nThis project structuring is according to the best practices, so I would suggest to follow this.\"/>\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the view folder create a view named CustomControlView.  Now, the Best practice would suggest that there should be a separate folder for controller, but for the sake of simplicity, I have collected both view and controller in the same folder itself.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic3.png\" width=\"70%\" />\n\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"In the view, define the inputControl and the button\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"CustomControlView.view.xml\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic4.PNG\" width=\"70%\" />\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"CustomControlView.controller.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic5.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Now Create a new folder in the webcontent named as control and create a new js file. You can name it accordingly, here I have named it SpeechRecognitionInputControl.js.\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic6.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"This is the main file, where the coding is to be done\"/>\n\t\t\t\t<Label class=\"sapUiSmallMargin\" design=\"Bold\" text=\"SpeechRecognitionInputControl.js\" width=\"100%\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic7.png\" width=\"70%\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic8.png\" width=\"70%\" />\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic9.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Output would look like something like this:\"/>\n\t\t\t\t<con:Image class=\"sapUiSmallMargin\" src=\"css/Image/Advanced/pic10.png\" width=\"70%\" />\n\t\t\t\t<FormattedText class=\"labelsize\" width=\"90%\"\n\t\t\t\thtmlText=\"Even though the speech functionality wont work, unless cordova plugin is installed and https://github.com/macdonst/SpeechRecognitionPlugin.git is integrated into the eclipse.Still, we learned how to implement custom control in sap ui5 application.\"/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t</content>\n\t\t\t\t\t<footer>\n\t\t<Toolbar/>\n\t\t</footer>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>"
	}
});